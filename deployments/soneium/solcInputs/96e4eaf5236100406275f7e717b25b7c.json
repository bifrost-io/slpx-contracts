{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAny2EVMMessageReceiver} from \"../interfaces/IAny2EVMMessageReceiver.sol\";\n\nimport {Client} from \"../libraries/Client.sol\";\n\nimport {IERC165} from \"../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\";\n\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\n  address internal immutable i_ccipRouter;\n\n  constructor(address router) {\n    if (router == address(0)) revert InvalidRouter(address(0));\n    i_ccipRouter = router;\n  }\n\n  /// @notice IERC165 supports an interfaceId\n  /// @param interfaceId The interfaceId to check\n  /// @return true if the interfaceId is supported\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\n  /// This allows CCIP to check if ccipReceive is available before calling it.\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\n  /// Additionally, if the receiver address does not have code associated with\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @inheritdoc IAny2EVMMessageReceiver\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\n    _ccipReceive(message);\n  }\n\n  /// @notice Override this function in your implementation.\n  /// @param message Any2EVMMessage\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\n\n  /////////////////////////////////////////////////////////////////////\n  // Plumbing\n  /////////////////////////////////////////////////////////////////////\n\n  /// @notice Return the current router\n  /// @return CCIP router address\n  function getRouter() public view returns (address) {\n    return address(i_ccipRouter);\n  }\n\n  error InvalidRouter(address router);\n\n  /// @dev only calls from the set router are accepted.\n  modifier onlyRouter() {\n    if (msg.sender != address(i_ccipRouter)) revert InvalidRouter(msg.sender);\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\n/// @notice Application contracts that intend to receive messages from\n/// the router should implement this interface.\ninterface IAny2EVMMessageReceiver {\n  /// @notice Called by the Router to deliver a message.\n  /// If this reverts, any token transfers also revert. The message\n  /// will move to a FAILED state and become available for manual execution.\n  /// @param message CCIP Message\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\ninterface IRouterClient {\n  error UnsupportedDestinationChain(uint64 destChainSelector);\n  error InsufficientFeeTokenAmount();\n  error InvalidMsgValue();\n\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\n  /// @param chainSelector The chain to check.\n  /// @return supported is true if it is supported, false if not.\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\n\n  /// @notice Gets a list of all supported tokens which can be sent or received\n  /// to/from a given chain id.\n  /// @param chainSelector The chainSelector.\n  /// @return tokens The addresses of all tokens that are supported.\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\n\n  /// @param destinationChainSelector The destination chainSelector\n  /// @param message The cross-chain CCIP message including data and/or tokens\n  /// @return fee returns execution fee for the message\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\n  /// @dev Reverts with appropriate reason upon invalid message.\n  function getFee(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage memory message\n  ) external view returns (uint256 fee);\n\n  /// @notice Request a message to be sent to the destination chain\n  /// @param destinationChainSelector The destination chain ID\n  /// @param message The cross-chain CCIP message including data and/or tokens\n  /// @return messageId The message ID\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\n  /// the overpayment with no refund.\n  /// @dev Reverts with appropriate reason upon invalid message.\n  function ccipSend(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage calldata message\n  ) external payable returns (bytes32);\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\n  struct EVMTokenAmount {\n    address token; // token address on the local chain.\n    uint256 amount; // Amount of tokens.\n  }\n\n  struct Any2EVMMessage {\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\n    uint64 sourceChainSelector; // Source chain selector.\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\n    bytes data; // payload sent in original message.\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n  }\n\n  // If extraArgs is empty bytes, the default is 200k gas limit.\n  struct EVM2AnyMessage {\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\n    bytes data; // Data payload\n    EVMTokenAmount[] tokenAmounts; // Token transfers\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\n  }\n\n  // bytes4(keccak256(\"CCIP EVMExtraArgsV1\"));\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n  struct EVMExtraArgsV1 {\n    uint256 gasLimit;\n  }\n\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwner} from \"./ConfirmedOwner.sol\";\n\n/// @title The OwnerIsCreator contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract OwnerIsCreator is ConfirmedOwner {\n  constructor() ConfirmedOwner(msg.sender) {}\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"
    },
    "@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint _start,\n        uint _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n                _gas, // gas\n                _target, // recipient\n                0, // ether value\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n                _gas, // gas\n                _target, // recipient\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\n        require(_buf.length >= 4);\n        uint _mask = LOW_28_MASK;\n        assembly {\n            // load the first word of\n            let _word := mload(add(_buf, 0x20))\n            // mask out the top 4 bytes\n            // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint _gasLimit,\n        bytes calldata _payload\n    ) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes calldata _payload,\n        bool _payInZRO,\n        bytes calldata _adapterParam\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        bytes calldata _payload\n    ) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address _userApplication,\n        uint _configType\n    ) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ILayerZeroReceiver.sol\";\nimport \"./interfaces/ILayerZeroUserApplicationConfig.sol\";\nimport \"./interfaces/ILayerZeroEndpoint.sol\";\nimport \"../libraries/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\n    using BytesLib for bytes;\n\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\n\n    ILayerZeroEndpoint public immutable lzEndpoint;\n    mapping(uint16 => bytes) public trustedRemoteLookup;\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\n    address public precrime;\n\n    event SetPrecrime(address precrime);\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\n\n    constructor(address _endpoint) {\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\n    }\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual override {\n        // lzReceive must be called by the endpoint for security\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\n\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n        require(\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\n            \"LzApp: invalid source sending contract\"\n        );\n\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n    function _blockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function _lzSend(\n        uint16 _dstChainId,\n        bytes memory _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams,\n        uint _nativeFee\n    ) internal virtual {\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\n        _checkPayloadSize(_dstChainId, _payload.length);\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\n    }\n\n    function _checkGasLimit(\n        uint16 _dstChainId,\n        uint16 _type,\n        bytes memory _adapterParams,\n        uint _extraGas\n    ) internal view virtual {\n        uint providedGasLimit = _getGasLimit(_adapterParams);\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n        require(providedGasLimit >= minGasLimit + _extraGas, \"LzApp: gas limit is too low\");\n    }\n\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\n        if (payloadSizeLimit == 0) {\n            // use default if not set\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\n        }\n        require(_payloadSize <= payloadSizeLimit, \"LzApp: payload size is too large\");\n    }\n\n    //---------------------------UserApplication config----------------------------------------\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address,\n        uint _configType\n    ) external view returns (bytes memory) {\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\n    }\n\n    // generic config for LayerZero user Application\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external override onlyOwner {\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setSendVersion(_version);\n    }\n\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setReceiveVersion(_version);\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    // _path = abi.encodePacked(remoteAddress, localAddress)\n    // this function set the trusted path for the cross-chain communication\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = _path;\n        emit SetTrustedRemote(_remoteChainId, _path);\n    }\n\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n    }\n\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\n        require(path.length != 0, \"LzApp: no trusted path record\");\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n    }\n\n    function setPrecrime(address _precrime) external onlyOwner {\n        precrime = _precrime;\n        emit SetPrecrime(_precrime);\n    }\n\n    function setMinDstGas(\n        uint16 _dstChainId,\n        uint16 _packetType,\n        uint _minGas\n    ) external onlyOwner {\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n    }\n\n    // if the size is 0, it means default size limit\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\n        payloadSizeLimitLookup[_dstChainId] = _size;\n    }\n\n    //--------------------------- VIEW FUNCTION ----------------------------------------\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n        return keccak256(trustedSource) == keccak256(_srcAddress);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LzApp.sol\";\nimport \"../libraries/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzApp is LzApp {\n    using ExcessivelySafeCall for address;\n\n    constructor(address _endpoint) LzApp(_endpoint) {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\n\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\n            gasleft(),\n            150,\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\n        );\n        if (!success) {\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\n        }\n    }\n\n    function _storeFailedMessage(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload,\n        bytes memory _reason\n    ) internal virtual {\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\n    }\n\n    function nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual {\n        // only internal transaction\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function retryMessage(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/BaseOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./OFTCoreV2.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nabstract contract BaseOFTV2 is OFTCoreV2, ERC165, IOFTV2 {\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {}\n\n    /************************************************************************\n     * public functions\n     ************************************************************************/\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        LzCallParams calldata _callParams\n    ) public payable virtual override {\n        _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\n    }\n\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) public payable virtual override {\n        _sendAndCall(\n            _from,\n            _dstChainId,\n            _toAddress,\n            _amount,\n            _payload,\n            _dstGasForCall,\n            _callParams.refundAddress,\n            _callParams.zroPaymentAddress,\n            _callParams.adapterParams\n        );\n    }\n\n    /************************************************************************\n     * public view functions\n     ************************************************************************/\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IOFTV2).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\n    }\n\n    function estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\n    }\n\n    function circulatingSupply() public view virtual override returns (uint);\n\n    function token() public view virtual override returns (address);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/ICommonOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface ICommonOFT is IERC165 {\n\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _amount - amount of the tokens to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    /**\n     * @dev returns the circulating amount of tokens on current chain\n     */\n    function circulatingSupply() external view returns (uint);\n\n    /**\n     * @dev returns the address of the ERC20 token\n     */\n    function token() external view returns (address);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/IOFTReceiverV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\ninterface IOFTReceiverV2 {\n    /**\n     * @dev Called by the OFT contract when tokens are received from source chain.\n     * @param _srcChainId The chain id of the source chain.\n     * @param _srcAddress The address of the OFT token contract on the source chain.\n     * @param _nonce The nonce of the transaction on the source chain.\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\n     * @param _amount The amount of tokens to transfer.\n     * @param _payload Additional data with no specified format.\n     */\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/IOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ICommonOFT.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface IOFTV2 is ICommonOFT {\n\n    /**\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_from` the owner of token\n     * `_dstChainId` the destination chain identifier\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_amount` the quantity of tokens in wei\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\n\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTCoreV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../../lzApp/NonblockingLzApp.sol\";\nimport \"../../../libraries/ExcessivelySafeCall.sol\";\nimport \"./interfaces/ICommonOFT.sol\";\nimport \"./interfaces/IOFTReceiverV2.sol\";\n\nabstract contract OFTCoreV2 is NonblockingLzApp {\n    using BytesLib for bytes;\n    using ExcessivelySafeCall for address;\n\n    uint public constant NO_EXTRA_GAS = 0;\n\n    // packet type\n    uint8 public constant PT_SEND = 0;\n    uint8 public constant PT_SEND_AND_CALL = 1;\n\n    uint8 public immutable sharedDecimals;\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\n\n    /**\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\n     * `_nonce` is the outbound nonce\n     */\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\n\n    /**\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\n     * `_nonce` is the inbound nonce.\n     */\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\n\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\n\n    event NonContractAddress(address _address);\n\n    // _sharedDecimals should be the minimum decimals on all chains\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\n        sharedDecimals = _sharedDecimals;\n    }\n\n    /************************************************************************\n     * public functions\n     ************************************************************************/\n    function callOnOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes32 _from,\n        address _to,\n        uint _amount,\n        bytes calldata _payload,\n        uint _gasForCall\n    ) public virtual {\n        require(_msgSender() == address(this), \"OFTCore: caller must be OFTCore\");\n\n        // send\n        _amount = _transferFrom(address(this), _to, _amount);\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\n\n        // call\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\n    }\n\n    /************************************************************************\n     * internal functions\n     ************************************************************************/\n    function _estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes memory _adapterParams\n    ) internal view virtual returns (uint nativeFee, uint zroFee) {\n        // mock the payload for sendFrom()\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\n    }\n\n    function _estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes memory _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes memory _adapterParams\n    ) internal view virtual returns (uint nativeFee, uint zroFee) {\n        // mock the payload for sendAndCall()\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\n    }\n\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual override {\n        uint8 packetType = _payload.toUint8(0);\n\n        if (packetType == PT_SEND) {\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\n        } else if (packetType == PT_SEND_AND_CALL) {\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\n        } else {\n            revert(\"OFTCore: unknown packet type\");\n        }\n    }\n\n    function _send(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams\n    ) internal virtual returns (uint amount) {\n        _checkGasLimit(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\n\n        (amount, ) = _removeDust(_amount);\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\n        require(amount > 0, \"OFTCore: amount too small\");\n\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\n\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\n    }\n\n    function _sendAck(\n        uint16 _srcChainId,\n        bytes memory,\n        uint64,\n        bytes memory _payload\n    ) internal virtual {\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\n        if (to == address(0)) {\n            to = address(0xdead);\n        }\n\n        uint amount = _sd2ld(amountSD);\n        amount = _creditTo(_srcChainId, to, amount);\n\n        emit ReceiveFromChain(_srcChainId, to, amount);\n    }\n\n    function _sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes memory _payload,\n        uint64 _dstGasForCall,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams\n    ) internal virtual returns (uint amount) {\n        _checkGasLimit(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\n\n        (amount, ) = _removeDust(_amount);\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\n        require(amount > 0, \"OFTCore: amount too small\");\n\n        // encode the msg.sender into the payload instead of _from\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\n\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\n    }\n\n    function _sendAndCallAck(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual {\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\n\n        bool credited = creditedPackets[_srcChainId][_srcAddress][_nonce];\n        uint amount = _sd2ld(amountSD);\n\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\n        if (!credited) {\n            amount = _creditTo(_srcChainId, address(this), amount);\n            creditedPackets[_srcChainId][_srcAddress][_nonce] = true;\n        }\n\n        if (!_isContract(to)) {\n            emit NonContractAddress(to);\n            return;\n        }\n\n        // workaround for stack too deep\n        uint16 srcChainId = _srcChainId;\n        bytes memory srcAddress = _srcAddress;\n        uint64 nonce = _nonce;\n        bytes memory payload = _payload;\n        bytes32 from_ = from;\n        address to_ = to;\n        uint amount_ = amount;\n        bytes memory payloadForCall_ = payloadForCall;\n\n        // no gas limit for the call if retry\n        uint gas = credited ? gasleft() : gasForCall;\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\n            gasleft(),\n            150,\n            abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas)\n        );\n\n        if (success) {\n            bytes32 hash = keccak256(payload);\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\n        } else {\n            // store the failed message into the nonblockingLzApp\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\n        }\n    }\n\n    function _isContract(address _account) internal view returns (bool) {\n        return _account.code.length > 0;\n    }\n\n    function _ld2sd(uint _amount) internal view virtual returns (uint64) {\n        uint amountSD = _amount / _ld2sdRate();\n        require(amountSD <= type(uint64).max, \"OFTCore: amountSD overflow\");\n        return uint64(amountSD);\n    }\n\n    function _sd2ld(uint64 _amountSD) internal view virtual returns (uint) {\n        return _amountSD * _ld2sdRate();\n    }\n\n    function _removeDust(uint _amount) internal view virtual returns (uint amountAfter, uint dust) {\n        dust = _amount % _ld2sdRate();\n        amountAfter = _amount - dust;\n    }\n\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal view virtual returns (bytes memory) {\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\n    }\n\n    function _decodeSendPayload(bytes memory _payload) internal view virtual returns (address to, uint64 amountSD) {\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \"OFTCore: invalid payload\");\n\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\n        amountSD = _payload.toUint64(33);\n    }\n\n    function _encodeSendAndCallPayload(\n        address _from,\n        bytes32 _toAddress,\n        uint64 _amountSD,\n        bytes memory _payload,\n        uint64 _dstGasForCall\n    ) internal view virtual returns (bytes memory) {\n        return abi.encodePacked(PT_SEND_AND_CALL, _toAddress, _amountSD, _addressToBytes32(_from), _dstGasForCall, _payload);\n    }\n\n    function _decodeSendAndCallPayload(bytes memory _payload)\n        internal\n        view\n        virtual\n        returns (\n            bytes32 from,\n            address to,\n            uint64 amountSD,\n            bytes memory payload,\n            uint64 dstGasForCall\n        )\n    {\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \"OFTCore: invalid payload\");\n\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\n        amountSD = _payload.toUint64(33);\n        from = _payload.toBytes32(41);\n        dstGasForCall = _payload.toUint64(73);\n        payload = _payload.slice(81, _payload.length - 81);\n    }\n\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\n        return bytes32(uint(uint160(_address)));\n    }\n\n    function _debitFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount\n    ) internal virtual returns (uint);\n\n    function _creditTo(\n        uint16 _srcChainId,\n        address _toAddress,\n        uint _amount\n    ) internal virtual returns (uint);\n\n    function _transferFrom(\n        address _from,\n        address _to,\n        uint _amount\n    ) internal virtual returns (uint);\n\n    function _ld2sdRate() internal view virtual returns (uint);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./BaseOFTV2.sol\";\n\ncontract OFTV2 is BaseOFTV2, ERC20 {\n    uint internal immutable ld2sdRate;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _sharedDecimals,\n        address _lzEndpoint\n    ) ERC20(_name, _symbol) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\n        uint8 decimals = decimals();\n        require(_sharedDecimals <= decimals, \"OFT: sharedDecimals must be <= decimals\");\n        ld2sdRate = 10**(decimals - _sharedDecimals);\n    }\n\n    /************************************************************************\n     * public functions\n     ************************************************************************/\n    function circulatingSupply() public view virtual override returns (uint) {\n        return totalSupply();\n    }\n\n    function token() public view virtual override returns (address) {\n        return address(this);\n    }\n\n    /************************************************************************\n     * internal functions\n     ************************************************************************/\n    function _debitFrom(\n        address _from,\n        uint16,\n        bytes32,\n        uint _amount\n    ) internal virtual override returns (uint) {\n        address spender = _msgSender();\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\n        _burn(_from, _amount);\n        return _amount;\n    }\n\n    function _creditTo(\n        uint16,\n        address _toAddress,\n        uint _amount\n    ) internal virtual override returns (uint) {\n        _mint(_toAddress, _amount);\n        return _amount;\n    }\n\n    function _transferFrom(\n        address _from,\n        address _to,\n        uint _amount\n    ) internal virtual override returns (uint) {\n        address spender = _msgSender();\n        // if transfer from this contract, no need to check allowance\n        if (_from != address(this) && _from != spender) _spendAllowance(_from, spender, _amount);\n        _transfer(_from, _to, _amount);\n        return _amount;\n    }\n\n    function _ld2sdRate() internal view virtual override returns (uint) {\n        return ld2sdRate;\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/ProxyOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./BaseOFTV2.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract ProxyOFTV2 is BaseOFTV2 {\n    using SafeERC20 for IERC20;\n\n    IERC20 internal immutable innerToken;\n    uint internal immutable ld2sdRate;\n\n    // total amount is transferred from this chain to other chains, ensuring the total is less than uint64.max in sd\n    uint public outboundAmount;\n\n    constructor(\n        address _token,\n        uint8 _sharedDecimals,\n        address _lzEndpoint\n    ) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\n        innerToken = IERC20(_token);\n\n        (bool success, bytes memory data) = _token.staticcall(abi.encodeWithSignature(\"decimals()\"));\n        require(success, \"ProxyOFT: failed to get token decimals\");\n        uint8 decimals = abi.decode(data, (uint8));\n\n        require(_sharedDecimals <= decimals, \"ProxyOFT: sharedDecimals must be <= decimals\");\n        ld2sdRate = 10**(decimals - _sharedDecimals);\n    }\n\n    /************************************************************************\n     * public functions\n     ************************************************************************/\n    function circulatingSupply() public view virtual override returns (uint) {\n        return innerToken.totalSupply() - outboundAmount;\n    }\n\n    function token() public view virtual override returns (address) {\n        return address(innerToken);\n    }\n\n    /************************************************************************\n     * internal functions\n     ************************************************************************/\n    function _debitFrom(\n        address _from,\n        uint16,\n        bytes32,\n        uint _amount\n    ) internal virtual override returns (uint) {\n        require(_from == _msgSender(), \"ProxyOFT: owner is not send caller\");\n\n        _amount = _transferFrom(_from, address(this), _amount);\n\n        // _amount still may have dust if the token has transfer fee, then give the dust back to the sender\n        (uint amount, uint dust) = _removeDust(_amount);\n        if (dust > 0) innerToken.safeTransfer(_from, dust);\n\n        // check total outbound amount\n        outboundAmount += amount;\n        uint cap = _sd2ld(type(uint64).max);\n        require(cap >= outboundAmount, \"ProxyOFT: outboundAmount overflow\");\n\n        return amount;\n    }\n\n    function _creditTo(\n        uint16,\n        address _toAddress,\n        uint _amount\n    ) internal virtual override returns (uint) {\n        outboundAmount -= _amount;\n\n        // tokens are already in this contract, so no need to transfer\n        if (_toAddress == address(this)) {\n            return _amount;\n        }\n\n        return _transferFrom(address(this), _toAddress, _amount);\n    }\n\n    function _transferFrom(\n        address _from,\n        address _to,\n        uint _amount\n    ) internal virtual override returns (uint) {\n        uint before = innerToken.balanceOf(_to);\n        if (_from == address(this)) {\n            innerToken.safeTransfer(_to, _amount);\n        } else {\n            innerToken.safeTransferFrom(_from, _to, _amount);\n        }\n        return innerToken.balanceOf(_to) - before;\n    }\n\n    function _ld2sdRate() internal view virtual override returns (uint) {\n        return ld2sdRate;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/AstarReceiver.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport {IRouterClient} from \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\";\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\nimport {CCIPReceiver} from \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"./interfaces/IOFTReceiverV2.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"./interfaces/IOFTWithFee.sol\";\nimport \"./interfaces/XCM.sol\";\nimport \"./interfaces/XCM_v2.sol\";\nimport \"./interfaces/Types.sol\";\nimport \"./utils/BuildCallData.sol\";\nimport \"./utils/AddressToAccount.sol\";\nimport \"./AstarSlpx.sol\";\nimport \"./DerivativeContract.sol\";\n\ncontract AstarReceiver is CCIPReceiver, Ownable, IOFTReceiverV2 {\n    bytes1 private constant ASTAR_CHAIN_TYPE = 0x00;\n    bytes2 private constant ASTR_CURRENCY_ID = 0x0803;\n    bytes2 private constant VASTR_CURRENCY_ID = 0x0903;\n    uint256 private constant BIFROST_PARA_ID = 2030;\n    bool private constant IS_RELAY_CHAIN = false;\n    uint16 public constant destChainId = 257;\n    address public constant BNC = 0xfFffFffF00000000000000010000000000000007;\n    address public constant VASTR = 0xfffFffff00000000000000010000000000000010;\n    address public constant astarSlpx =\n        0xc6bf0C5C78686f1D0E2E54b97D6de6e2cEFAe9fD;\n    address public constant polkadotXcm =\n        0x0000000000000000000000000000000000005004;\n    address public constant astrNativeOFT =\n        0xdf41220C7e322bFEF933D85D01821ad277f90172;\n    address public constant vAstrProxyOFT =\n        0xba273b7Fa296614019c71Dcc54DCa6C922A93BcF;\n\n    uint64 private constant soneiumChainSelector = 6955638871347136141;\n    address private constant AstrToken =\n        0xbd5F3751856E11f3e80dBdA567Ef91Eb7e874791;\n    address private constant astarRouter =\n        0x0BF3dE8c5D3e8A2B34D2BEeB17ABfCeBaf363A59;\n    address public soneiumSlpx;\n\n    uint256 public astrLayerZeroFee;\n    uint256 public vastrLayerZeroFee;\n    address public scriptTrigger;\n    mapping(address => address) public callerToDerivativeAddress;\n    mapping(address => bool) public isDerivativeAddress;\n\n    event SetDerivativeAddress(\n        address indexed caller,\n        address indexed derivativeAddress\n    );\n    event Receive(address indexed sender, uint256 indexed amount);\n    event SetLayerZeroFee(\n        address indexed scriptTrigger,\n        uint256 indexed astrFee,\n        uint256 indexed vastrFee\n    );\n    event SetScriptTrigger(address indexed scriptTrigger);\n\n    constructor(address _soneiumSlpx, address router) CCIPReceiver(router) {\n        require(_soneiumSlpx != address(0), \"Invalid soneiumSlpx\");\n        soneiumSlpx = _soneiumSlpx;\n    }\n\n    function create_order(\n        address caller,\n        address assetAddress,\n        bytes2 token,\n        uint128 amount,\n        address receiver,\n        uint32 channel_id\n    ) internal {\n        require(amount > 0, \"amount must be greater than 0\");\n        if (assetAddress == address(0)) {\n            xcmTransferNativeAsset(caller, uint256(amount));\n        } else {\n            xcmTransferAsset(assetAddress, caller, uint256(amount));\n        }\n\n        // Build bifrost slpx create order call data\n        bytes memory callData = BuildCallData.buildCreateOrderCallBytes(\n            caller,\n            block.chainid,\n            block.number,\n            token,\n            amount,\n            abi.encodePacked(ASTAR_CHAIN_TYPE, receiver),\n            \"Soneium\",\n            channel_id\n        );\n        // XCM Transact\n        (uint64 transactWeight, uint256 feeAmount) = AstarSlpx(astarSlpx)\n            .operationToFeeInfo(AstarSlpx.Operation.Mint);\n        require(\n            XCM(polkadotXcm).remote_transact(\n                BIFROST_PARA_ID,\n                IS_RELAY_CHAIN,\n                BNC,\n                feeAmount,\n                callData,\n                transactWeight\n            ),\n            \"Failed to send xcm\"\n        );\n    }\n\n    function onOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata,\n        uint64,\n        bytes32 _from,\n        uint _amount,\n        bytes calldata _payload\n    ) external override {\n        require(_srcChainId == destChainId, \"only receive msg from astar-zk\");\n        require(_msgSender() == vAstrProxyOFT, \"only native oft can call\");\n        require(\n            address(uint160(uint(_from))) == soneiumSlpx,\n            \"only receive msg from soneiumSlpx\"\n        );\n        (address caller, Types.Operation operation) = abi.decode(\n            _payload,\n            (address, Types.Operation)\n        );\n        if (callerToDerivativeAddress[caller] == address(0)) {\n            setDerivativeAddress(caller);\n        }\n\n        if (operation == Types.Operation.Redeem) {\n            bool success = IERC20(VASTR).transfer(\n                scriptTrigger,\n                vastrLayerZeroFee\n            );\n            require(success, \"failed to charge\");\n            create_order(\n                caller,\n                VASTR,\n                VASTR_CURRENCY_ID,\n                uint128(_amount - vastrLayerZeroFee),\n                callerToDerivativeAddress[caller],\n                0\n            );\n        }\n    }\n\n    /// handle a received message\n    function _ccipReceive(\n        Client.Any2EVMMessage memory any2EvmMessage\n    ) internal override {\n        uint64 sourceChainSelector = any2EvmMessage.sourceChainSelector; // fetch the source chain identifier (aka selector)\n        address sender = abi.decode(any2EvmMessage.sender, (address)); // abi-decoding of the sender address\n        Client.EVMTokenAmount[] memory tokenAmounts = any2EvmMessage\n            .destTokenAmounts;\n        address token = tokenAmounts[0].token; // we expect one token to be transfered at once but of course, you can transfer several tokens.\n        uint256 amount = tokenAmounts[0].amount; // we expect one token to be transfered at once but of course, you can transfer several tokens.\n\n        (address caller, Types.Operation operation) = abi.decode(\n            any2EvmMessage.data,\n            (address, Types.Operation)\n        );\n        if (callerToDerivativeAddress[caller] == address(0)) {\n            setDerivativeAddress(caller);\n        }\n\n        if (operation == Types.Operation.Mint) {\n            create_order(\n                caller,\n                address(0),\n                ASTAR_CHAIN_TYPE,\n                uint128(amount),\n                callerToDerivativeAddress[caller],\n                0\n            );\n        }\n    }\n\n    function claimVAstr(\n        address addr,\n        bytes calldata _adapterParams\n    ) external payable {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        address derivativeAddress = callerToDerivativeAddress[addr];\n        require(derivativeAddress != address(0), \"invalid address\");\n        uint256 amount = DerivativeContract(derivativeAddress)\n            .withdrawErc20Token(VASTR);\n        IERC20(VASTR).approve(vAstrProxyOFT, amount);\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(_msgSender()),\n            address(0),\n            _adapterParams\n        );\n        bytes32 toAddress = bytes32(uint256(uint160(addr)));\n        (uint256 estimateFee, ) = IOFTV2(vAstrProxyOFT).estimateSendFee(\n            destChainId,\n            toAddress,\n            amount,\n            false,\n            _adapterParams\n        );\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n        IOFTV2(vAstrProxyOFT).sendFrom{value: estimateFee}(\n            address(this),\n            destChainId,\n            toAddress,\n            amount,\n            callParams\n        );\n    }\n\n    function claimAstr(address addr, uint256 _amount) external payable {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        DerivativeContract(callerToDerivativeAddress[addr]).withdrawNativeToken(\n            _amount\n        );\n        Client.EVMTokenAmount[]\n            memory tokenAmounts = new Client.EVMTokenAmount[](1);\n        Client.EVMTokenAmount memory tokenAmount = Client.EVMTokenAmount({\n            token: AstrToken,\n            amount: _amount\n        });\n        tokenAmounts[0] = tokenAmount;\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\n            receiver: abi.encode(addr),\n            data: abi.encode(\"\"),\n            tokenAmounts: tokenAmounts,\n            extraArgs: \"\",\n            feeToken: address(0)\n        });\n\n        uint256 estimateFee = IRouterClient(this.getRouter()).getFee(\n            soneiumChainSelector,\n            message\n        );\n\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n        IRouterClient(this.getRouter()).ccipSend{value: estimateFee}(\n            soneiumChainSelector,\n            message\n        );\n    }\n\n    function setDerivativeAddress(address addr) public {\n        require(\n            callerToDerivativeAddress[addr] == address(0),\n            \"already set derivativeAddress\"\n        );\n        bytes memory bytecode = type(DerivativeContract).creationCode;\n        bytes32 salt = bytes32(uint256(uint160(addr)));\n        address derivativeAddress = Create2.deploy(0, salt, bytecode);\n        callerToDerivativeAddress[addr] = derivativeAddress;\n        isDerivativeAddress[derivativeAddress] = true;\n        emit SetDerivativeAddress(addr, derivativeAddress);\n    }\n\n    function setLayerZeroFee() external {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        bytes32 toAddress = bytes32(uint256(uint160(scriptTrigger)));\n        uint256 amount = 1000 ether;\n        bytes memory adapterParams = abi.encodePacked(\n            uint16(1),\n            uint256(100000)\n        );\n\n        (uint256 vastrFee, ) = IOFTV2(vAstrProxyOFT).estimateSendFee(\n            destChainId,\n            toAddress,\n            amount,\n            false,\n            adapterParams\n        );\n\n        (uint256 astrFee, ) = IOFTWithFee(astrNativeOFT).estimateSendFee(\n            destChainId,\n            toAddress,\n            amount,\n            false,\n            adapterParams\n        );\n\n        astrLayerZeroFee = astrFee;\n        vastrLayerZeroFee = vastrFee;\n\n        emit SetLayerZeroFee(\n            scriptTrigger,\n            astrLayerZeroFee,\n            vastrLayerZeroFee\n        );\n    }\n\n    function setScriptTrigger(address _scriptTrigger) external onlyOwner {\n        require(_scriptTrigger != address(0), \"invalid address\");\n        scriptTrigger = _scriptTrigger;\n        emit SetScriptTrigger(_scriptTrigger);\n    }\n\n    function xcmTransferNativeAsset(address to, uint256 amount) internal {\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(to);\n        address[] memory assetId = new address[](1);\n        uint256[] memory assetAmount = new uint256[](1);\n        assetId[0] = address(0);\n        assetAmount[0] = amount;\n        require(\n            XCM(polkadotXcm).assets_reserve_transfer(\n                assetId,\n                assetAmount,\n                publicKey,\n                IS_RELAY_CHAIN,\n                BIFROST_PARA_ID,\n                0\n            ),\n            \"Failed to send xcm\"\n        );\n    }\n\n    function xcmTransferAsset(\n        address assetAddress,\n        address to,\n        uint256 amount\n    ) internal {\n        require(assetAddress != address(0), \"Invalid assetAddress\");\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(to);\n\n        address[] memory assetId = new address[](1);\n        uint256[] memory assetAmount = new uint256[](1);\n        assetId[0] = assetAddress;\n        assetAmount[0] = amount;\n        require(\n            XCM(polkadotXcm).assets_withdraw(\n                assetId,\n                assetAmount,\n                publicKey,\n                IS_RELAY_CHAIN,\n                BIFROST_PARA_ID,\n                0\n            ),\n            \"Failed to send xcm\"\n        );\n    }\n\n    receive() external payable {\n        require(\n            isDerivativeAddress[_msgSender()] || _msgSender() == astrNativeOFT,\n            \"sender is not a derivativeAddress or astrNativeOFT\"\n        );\n        emit Receive(_msgSender(), msg.value);\n    }\n}\n"
    },
    "contracts/AstarSlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./interfaces/XCM.sol\";\nimport \"./interfaces/XCM_v2.sol\";\nimport \"./interfaces/ISlpx.sol\";\nimport \"./utils/BuildCallData.sol\";\nimport \"./utils/AddressToAccount.sol\";\n\ncontract AstarSlpx is ISlpx, OwnableUpgradeable, PausableUpgradeable {\n    address private constant NATIVE_ASSET_ADDRESS =\n        0x0000000000000000000000000000000000000000;\n    address private constant BNC_ADDRESS =\n        0xfFffFffF00000000000000010000000000000007;\n    address private constant XCM_ADDRESS =\n        0x0000000000000000000000000000000000005004;\n    bytes1 private constant ASTAR_CHAIN = 0x00;\n    uint32 private constant BIFROST_PARA_ID = 2030;\n\n    enum Operation {\n        Mint,\n        Redeem,\n        ZenlinkSwap,\n        StableSwap\n    }\n\n    struct AssetInfo {\n        bytes2 currencyId;\n        uint256 operationalMin;\n    }\n\n    struct FeeInfo {\n        uint64 transactRequiredWeightAtMost;\n        uint256 feeAmount;\n    }\n\n    mapping(address => AssetInfo) public addressToAssetInfo;\n    mapping(Operation => FeeInfo) public operationToFeeInfo;\n    struct DestChainInfo {\n        bool is_evm;\n        bool is_substrate;\n        bytes1 raw_chain_index;\n    }\n    mapping(uint64 => DestChainInfo) public destChainInfo;\n\n    function checkAssetIsExist(\n        address assetAddress\n    ) internal view returns (bytes2) {\n        AssetInfo memory assetInfo = addressToAssetInfo[assetAddress];\n        require(assetInfo.operationalMin > 0, \"Asset is not exist\");\n        require(assetInfo.currencyId != bytes2(0), \"Invalid asset\");\n        return assetInfo.currencyId;\n    }\n\n    function checkFeeInfo(\n        Operation operation\n    ) internal view returns (FeeInfo memory) {\n        FeeInfo memory feeInfo = operationToFeeInfo[operation];\n        require(\n            feeInfo.transactRequiredWeightAtMost > 0,\n            \"Invalid transactRequiredWeightAtMost\"\n        );\n        require(feeInfo.feeAmount > 0, \"Invalid feeAmount\");\n        return feeInfo;\n    }\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        setAssetAddressInfo(NATIVE_ASSET_ADDRESS, 0x0803, 1000000000000000000);\n    }\n\n    function setOperationToFeeInfo(\n        Operation _operation,\n        uint64 _transactRequiredWeightAtMost,\n        uint256 _feeAmount\n    ) public onlyOwner {\n        require(\n            _transactRequiredWeightAtMost <= 10000000000,\n            \"transactRequiredWeightAtMost too large\"\n        );\n        require(_feeAmount <= 1000000000000, \"feeAmount too large\");\n        operationToFeeInfo[_operation] = FeeInfo(\n            _transactRequiredWeightAtMost,\n            _feeAmount\n        );\n    }\n\n    function setAssetAddressInfo(\n        address assetAddress,\n        bytes2 currencyId,\n        uint256 minimumValue\n    ) public onlyOwner {\n        require(minimumValue != 0, \"Invalid minimumValue\");\n        require(currencyId != bytes2(0), \"Invalid currencyId\");\n        AssetInfo storage assetInfo = addressToAssetInfo[assetAddress];\n        assetInfo.currencyId = currencyId;\n        assetInfo.operationalMin = minimumValue;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function xcmTransferNativeAsset(uint256 amount) internal {\n        require(\n            amount >= addressToAssetInfo[NATIVE_ASSET_ADDRESS].operationalMin,\n            \"Less than MinimumValue\"\n        );\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\n            _msgSender()\n        );\n        address[] memory assetId = new address[](1);\n        uint256[] memory assetAmount = new uint256[](1);\n        assetId[0] = NATIVE_ASSET_ADDRESS;\n        assetAmount[0] = amount;\n        require(\n            XCM(XCM_ADDRESS).assets_reserve_transfer(\n                assetId,\n                assetAmount,\n                publicKey,\n                false,\n                BIFROST_PARA_ID,\n                0\n            ),\n            \"Failed to send xcm\"\n        );\n    }\n\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\n        require(assetAddress != address(0), \"Invalid assetAddress\");\n        require(\n            amount >= addressToAssetInfo[assetAddress].operationalMin,\n            \"Less than MinimumValue\"\n        );\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\n            _msgSender()\n        );\n\n        XCM_v2.Multilocation memory dest_account = getXtokensDestination(\n            publicKey\n        );\n        IERC20 asset = IERC20(assetAddress);\n        asset.transferFrom(_msgSender(), address(this), amount);\n        require(\n            XCM_v2(XCM_ADDRESS).transfer(\n                assetAddress,\n                amount,\n                dest_account,\n                XCM_v2.WeightV2(0, 0)\n            ),\n            \"Failed to send xcm\"\n        );\n    }\n\n    function mintVNativeAsset(\n        address receiver,\n        string memory remark\n    ) external payable override whenNotPaused {\n        require(bytes(remark).length <= 32, \"remark too long\");\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\n\n        xcmTransferNativeAsset(msg.value);\n\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintCallBytes(\n            _msgSender(),\n            nativeToken,\n            targetChain,\n            remark\n        );\n\n        // xcm transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        require(\n            XCM(XCM_ADDRESS).remote_transact(\n                BIFROST_PARA_ID,\n                false,\n                BNC_ADDRESS,\n                feeInfo.feeAmount,\n                callData,\n                feeInfo.transactRequiredWeightAtMost\n            ),\n            \"Failed to send xcm\"\n        );\n        emit Mint(\n            _msgSender(),\n            NATIVE_ASSET_ADDRESS,\n            msg.value,\n            receiver,\n            callData,\n            remark\n        );\n    }\n\n    function mintVAsset(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark\n    ) external override {\n        require(bytes(remark).length <= 32, \"remark too long\");\n\n        bytes2 token = checkAssetIsExist(assetAddress);\n\n        // xtokens call\n        xcmTransferAsset(assetAddress, amount);\n\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintCallBytes(\n            _msgSender(),\n            token,\n            targetChain,\n            remark\n        );\n\n        // xcm transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        require(\n            XCM(XCM_ADDRESS).remote_transact(\n                BIFROST_PARA_ID,\n                false,\n                BNC_ADDRESS,\n                feeInfo.feeAmount,\n                callData,\n                feeInfo.transactRequiredWeightAtMost\n            ),\n            \"Failed to send xcm\"\n        );\n        emit Mint(\n            _msgSender(),\n            assetAddress,\n            amount,\n            receiver,\n            callData,\n            remark\n        );\n    }\n\n    function mintVNativeAssetWithChannelId(\n        address receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external payable override whenNotPaused {\n        require(bytes(remark).length <= 32, \"remark too long\");\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\n\n        xcmTransferNativeAsset(msg.value);\n\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintWithChannelIdCallBytes(\n            _msgSender(),\n            nativeToken,\n            targetChain,\n            remark,\n            channel_id\n        );\n\n        // xcm transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        require(\n            XCM(XCM_ADDRESS).remote_transact(\n                BIFROST_PARA_ID,\n                false,\n                BNC_ADDRESS,\n                feeInfo.feeAmount,\n                callData,\n                feeInfo.transactRequiredWeightAtMost\n            ),\n            \"Failed to send xcm\"\n        );\n        emit Mint(\n            _msgSender(),\n            NATIVE_ASSET_ADDRESS,\n            msg.value,\n            receiver,\n            callData,\n            remark\n        );\n    }\n\n    function mintVAssetWithChannelId(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external override {\n        require(bytes(remark).length <= 32, \"remark too long\");\n\n        bytes2 token = checkAssetIsExist(assetAddress);\n\n        // xtokens call\n        xcmTransferAsset(assetAddress, amount);\n\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintWithChannelIdCallBytes(\n            _msgSender(),\n            token,\n            targetChain,\n            remark,\n            channel_id\n        );\n\n        // xcm transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        require(\n            XCM(XCM_ADDRESS).remote_transact(\n                BIFROST_PARA_ID,\n                false,\n                BNC_ADDRESS,\n                feeInfo.feeAmount,\n                callData,\n                feeInfo.transactRequiredWeightAtMost\n            ),\n            \"Failed to send xcm\"\n        );\n        emit Mint(\n            _msgSender(),\n            assetAddress,\n            amount,\n            receiver,\n            callData,\n            remark\n        );\n    }\n\n    function redeemAsset(\n        address vAssetAddress,\n        uint256 amount,\n        address receiver\n    ) external override whenNotPaused {\n        bytes2 vtoken = checkAssetIsExist(vAssetAddress);\n\n        xcmTransferAsset(vAssetAddress, amount);\n\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(\n            _msgSender(),\n            vtoken,\n            targetChain\n        );\n        // xcm transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Redeem);\n        require(\n            XCM(XCM_ADDRESS).remote_transact(\n                BIFROST_PARA_ID,\n                false,\n                BNC_ADDRESS,\n                feeInfo.feeAmount,\n                callData,\n                feeInfo.transactRequiredWeightAtMost\n            ),\n            \"Failed to send xcm\"\n        );\n        emit Redeem(_msgSender(), vAssetAddress, amount, receiver, callData);\n    }\n\n    function setDestChainInfo(\n        uint64 dest_chain_id,\n        bool is_evm,\n        bool is_substrate,\n        bytes1 raw_chain_index\n    ) public onlyOwner {\n        require(\n            !(is_evm && is_substrate),\n            \"Both is_evm and is_substrate cannot be true\"\n        );\n        DestChainInfo storage chainInfo = destChainInfo[dest_chain_id];\n        chainInfo.is_evm = is_evm;\n        chainInfo.is_substrate = is_substrate;\n        chainInfo.raw_chain_index = raw_chain_index;\n    }\n\n    function create_order(\n        address assetAddress,\n        uint128 amount,\n        uint64 dest_chain_id,\n        bytes memory receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external payable override {\n        require(\n            bytes(remark).length > 0 && bytes(remark).length <= 32,\n            \"remark must be less than 32 bytes and not empty\"\n        );\n        require(amount > 0, \"amount must be greater than 0\");\n\n        DestChainInfo memory chainInfo = destChainInfo[dest_chain_id];\n        if (chainInfo.is_evm) {\n            require(receiver.length == 20, \"evm address must be 20 bytes\");\n        } else if (chainInfo.is_substrate) {\n            require(\n                receiver.length == 32,\n                \"substrate public key must be 32 bytes\"\n            );\n        } else {\n            revert(\"Destination chain is not supported\");\n        }\n\n        bytes2 token = checkAssetIsExist(assetAddress);\n        if (assetAddress == NATIVE_ASSET_ADDRESS) {\n            amount = uint128(msg.value);\n            xcmTransferNativeAsset(uint256(amount));\n        } else {\n            xcmTransferAsset(assetAddress, uint256(amount));\n        }\n\n        // Build bifrost slpx create order call data\n        bytes memory callData = BuildCallData.buildCreateOrderCallBytes(\n            _msgSender(),\n            block.chainid,\n            block.number,\n            token,\n            amount,\n            abi.encodePacked(chainInfo.raw_chain_index, receiver),\n            remark,\n            channel_id\n        );\n        // xcm transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        require(\n            XCM(XCM_ADDRESS).remote_transact(\n                BIFROST_PARA_ID,\n                false,\n                BNC_ADDRESS,\n                feeInfo.feeAmount,\n                callData,\n                feeInfo.transactRequiredWeightAtMost\n            ),\n            \"Failed to send xcm\"\n        );\n        emit CreateOrder(\n            assetAddress,\n            amount,\n            dest_chain_id,\n            receiver,\n            remark,\n            channel_id\n        );\n    }\n\n    function getXtokensDestination(\n        bytes32 publicKey\n    ) internal pure returns (XCM_v2.Multilocation memory) {\n        bytes[] memory interior = new bytes[](2);\n        // Parachain: 2001/2030\n        interior[0] = bytes.concat(hex\"00\", bytes4(BIFROST_PARA_ID));\n        // AccountId32: { id: public_key , network: any }\n        interior[1] = bytes.concat(hex\"01\", publicKey, hex\"00\");\n        XCM_v2.Multilocation memory dest = XCM_v2.Multilocation({\n            parents: 1,\n            interior: interior\n        });\n\n        return dest;\n    }\n}\n"
    },
    "contracts/DerivativeContract.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract DerivativeContract is ReentrancyGuard {\n    address public receiver;\n\n    event Withdraw(address caller, address to, address token, uint256 amount);\n\n    constructor() {\n        receiver = msg.sender;\n    }\n\n    function withdrawErc20Token(\n        address _erc20\n    ) external nonReentrant returns (uint256) {\n        require(msg.sender == receiver, \"forbidden\");\n        require(_erc20 != address(0), \"invalid erc20\");\n        uint256 balance = IERC20(_erc20).balanceOf(address(this));\n        require(balance != 0, \"balance to low\");\n        IERC20(_erc20).transfer(receiver, balance);\n        emit Withdraw(msg.sender, receiver, _erc20, balance);\n        return balance;\n    }\n\n    function withdrawNativeToken(uint256 _amount) external nonReentrant {\n        require(msg.sender == receiver, \"forbidden\");\n        require(_amount != 0, \"balance to low\");\n        (bool success, ) = receiver.call{value: _amount}(\"\");\n        require(success, \"failed to withdrawNativeToken\");\n        emit Withdraw(msg.sender, receiver, address(0), _amount);\n    }\n}\n"
    },
    "contracts/EthereumSlpx.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.10;\n\nimport \"./interfaces/IVETH.sol\";\nimport \"./interfaces/snowbridge/IGateway.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/snowbridge/MultiAddress.sol\";\n\ncontract EthereumSlpx {\n    address constant gateway = 0x74bAA141B18D5D1eeF1591abf37167FbeCE23B72;\n    address constant slpcore = 0x74bAA141B18D5D1eeF1591abf37167FbeCE23B72;\n    address constant veth = 0x4Bc3263Eb5bb2Ef7Ad9aB6FB68be80E43b43801F;\n    uint128 constant destinationFee = 1000000;\n    uint32 constant paraId = 2030;\n    function mint() external payable {\n        uint256 fee = IGateway(gateway).quoteSendTokenFee(\n            veth,\n            paraId,\n            destinationFee\n        );\n        require(msg.value >= fee, \"msg.value to low\");\n        IVETH(slpcore).mint{value: msg.value - fee}();\n        uint256 vethAmount = IERC20(veth).balanceOf(address(this));\n        IERC20(veth).approve(gateway, vethAmount);\n        IGateway(gateway).sendToken{value: fee}(\n            veth,\n            paraId,\n            MultiAddress.MultiAddress({\n                kind: MultiAddress.Kind.Index,\n                data: abi.encode(paraId)\n            }),\n            destinationFee,\n            uint128(vethAmount)\n        );\n    }\n}\n"
    },
    "contracts/interfaces/ICommonOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface ICommonOFT is IERC165 {\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _amount - amount of the tokens to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    /**\n     * @dev returns the circulating amount of tokens on current chain\n     */\n    function circulatingSupply() external view returns (uint);\n\n    /**\n     * @dev returns the address of the ERC20 token\n     */\n    function token() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IOFTReceiverV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\ninterface IOFTReceiverV2 {\n    /**\n     * @dev Called by the OFT contract when tokens are received from source chain.\n     * @param _srcChainId The chain id of the source chain.\n     * @param _srcAddress The address of the OFT token contract on the source chain.\n     * @param _nonce The nonce of the transaction on the source chain.\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\n     * @param _amount The amount of tokens to transfer.\n     * @param _payload Additional data with no specified format.\n     */\n    function onOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes32 _from,\n        uint _amount,\n        bytes calldata _payload\n    ) external;\n}\n"
    },
    "contracts/interfaces/IOFTV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"./ICommonOFT.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface IOFTV2 is ICommonOFT {\n    /**\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_from` the owner of token\n     * `_dstChainId` the destination chain identifier\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_amount` the quantity of tokens in wei\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        LzCallParams calldata _callParams\n    ) external payable;\n\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IOFTWithFee.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"./ICommonOFT.sol\";\n\ninterface IOFTWithFee is ICommonOFT {\n    function deposit() external payable;\n    function withdraw(uint _amount) external;\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        uint _minAmount,\n        LzCallParams calldata _callParams\n    ) external payable;\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        uint _minAmount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/ISlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\ninterface ISlpx {\n    event Mint(\n        address minter,\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        bytes callcode,\n        string remark\n    );\n    event Redeem(\n        address redeemer,\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        bytes callcode\n    );\n    event CreateOrder(\n        address assetAddress,\n        uint128 amount,\n        uint64 dest_chain_id,\n        bytes receiver,\n        string remark,\n        uint32 channel_id\n    );\n\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\n    function mintVNativeAsset(\n        address receiver,\n        string memory remark\n    ) external payable;\n\n    /// Minted vAssets\n    function mintVAsset(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark\n    ) external;\n\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\n    function mintVNativeAssetWithChannelId(\n        address receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external payable;\n\n    /// Minted vAssets\n    function mintVAssetWithChannelId(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external;\n\n    /// Redeem assets\n    function redeemAsset(\n        address vAssetAddress,\n        uint256 amount,\n        address receiver\n    ) external;\n\n    /**\n     * @dev Create order to mint vAsset or redeem vAsset on bifrost chain\n     * @param assetAddress The address of the asset to mint or redeem\n     * @param amount The amount of the asset to mint or redeem\n     * @param dest_chain_id When order is executed on Bifrost, Asset/vAsset will be transferred to this chain\n     * @param receiver The receiver address on the destination chain, 20 bytes for EVM, 32 bytes for Substrate\n     * @param remark The remark of the order, less than 32 bytes. For example, \"OmniLS\"\n     * @param channel_id The channel id of the order, you can set it. Bifrost chain will use it to share reward.\n     **/\n    function create_order(\n        address assetAddress,\n        uint128 amount,\n        uint64 dest_chain_id,\n        bytes memory receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IVETH.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IVETH {\n    function mint() external payable;\n}\n"
    },
    "contracts/interfaces/snowbridge/IGateway.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\npragma solidity 0.8.10;\n\nimport \"./MultiAddress.sol\";\n\ninterface IGateway {\n    /// @dev Quote a fee in Ether for sending a token\n    /// 1. Delivery costs to BridgeHub\n    /// 2. XCM execution costs on destinationChain\n    function quoteSendTokenFee(address token, uint32 destinationChain, uint128 destinationFee)\n    external\n    view\n    returns (uint256);\n\n    /// @dev Send ERC20 tokens to parachain `destinationChain` and deposit into account `destinationAddress`\n    function sendToken(\n        address token,\n        uint32 destinationChain,\n        MultiAddress.MultiAddress calldata destinationAddress,\n        uint128 destinationFee,\n        uint128 amount\n    ) external payable;\n}"
    },
    "contracts/interfaces/snowbridge/MultiAddress.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\npragma solidity 0.8.10;\n\ncontract MultiAddress {\n    /// @dev An address for an on-chain account\n    struct MultiAddress {\n        Kind kind;\n        bytes data;\n    }\n\n    enum Kind {\n        Index,\n        Address32,\n        Address20\n    }\n\n    function isIndex(MultiAddress calldata multiAddress) public pure returns (bool) {\n        return multiAddress.kind == Kind.Index;\n    }\n\n    function asIndex(MultiAddress calldata multiAddress) public pure returns (uint32) {\n        return abi.decode(multiAddress.data, (uint32));\n    }\n\n    function isAddress32(MultiAddress calldata multiAddress) public pure returns (bool) {\n        return multiAddress.kind == Kind.Address32;\n    }\n\n    function asAddress32(MultiAddress calldata multiAddress) public pure returns (bytes32) {\n        return bytes32(multiAddress.data);\n    }\n\n    function isAddress20(MultiAddress calldata multiAddress) public pure returns (bool) {\n        return multiAddress.kind == Kind.Address20;\n    }\n\n    function asAddress20(MultiAddress calldata multiAddress) public pure returns (bytes20) {\n        return bytes20(multiAddress.data);\n    }\n\n    function multiAddressFromUint32(uint32 id) public pure returns (MultiAddress memory) {\n        return MultiAddress({kind: Kind.Index, data: abi.encode(id)});\n    }\n\n    function multiAddressFromBytes32(bytes32 id) public pure returns (MultiAddress memory) {\n        return MultiAddress({kind: Kind.Address32, data: bytes.concat(id)});\n    }\n\n    function multiAddressFromBytes20(bytes20 id) public pure returns (MultiAddress memory) {\n        return MultiAddress({kind: Kind.Address20, data: bytes.concat(id)});\n    }\n}"
    },
    "contracts/interfaces/Types.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\ninterface Types {\n    enum Operation {\n        Mint,\n        Redeem\n    }\n}\n"
    },
    "contracts/interfaces/XCM_v2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title XCM interface.\n */\ninterface XCM_v2 {\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\n    struct Multilocation {\n        uint8 parents;\n        bytes[] interior;\n    }\n\n    struct WeightV2 {\n        uint64 ref_time;\n        uint64 proof_size;\n    }\n\n    // A MultiAsset is defined by a multilocation and an amount\n    struct MultiAsset {\n        Multilocation location;\n        uint256 amount;\n    }\n\n    // A Currency is defined by address and the amount to be transferred\n    struct Currency {\n        address currencyAddress;\n        uint256 amount;\n    }\n\n    /// Transfer a token through XCM based on its address\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain, to set the\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\n    function transfer(\n        address currencyAddress,\n        uint256 amount,\n        Multilocation memory destination,\n        WeightV2 memory weight\n    ) external returns (bool);\n\n    /// Transfer a token through XCM based on its address specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\n    /// @param amount The amount of tokens we want to transfer\n    /// @param fee The amount to be spent to pay for execution in destination chain\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain, to set the\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\n    function transfer_with_fee(\n        address currencyAddress,\n        uint256 amount,\n        uint256 fee,\n        Multilocation memory destination,\n        WeightV2 memory weight\n    ) external returns (bool);\n\n    /// Transfer a token through XCM based on its MultiLocation\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param asset The asset we want to transfer, defined by its multilocation.\n    /// Currently only Concrete Fungible assets\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain, to set the\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\n    function transfer_multiasset(\n        Multilocation memory asset,\n        uint256 amount,\n        Multilocation memory destination,\n        WeightV2 memory weight\n    ) external returns (bool);\n\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param asset The asset we want to transfer, defined by its multilocation.\n    /// Currently only Concrete Fungible assets\n    /// @param amount The amount of tokens we want to transfer\n    /// @param fee The amount to be spent to pay for execution in destination chain\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain, to set the\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\n    function transfer_multiasset_with_fee(\n        Multilocation memory asset,\n        uint256 amount,\n        uint256 fee,\n        Multilocation memory destination,\n        WeightV2 memory weight\n    ) external returns (bool);\n\n    /// Transfer several tokens at once through XCM based on its address specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\n    /// @param feeItem Which of the currencies to be used as fee\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain, to set the\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\n    function transfer_multi_currencies(\n        Currency[] memory currencies,\n        uint32 feeItem,\n        Multilocation memory destination,\n        WeightV2 memory weight\n    ) external returns (bool);\n\n    /// Transfer several tokens at once through XCM based on its location specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param assets The assets we want to transfer, defined by their location and amount.\n    /// @param feeItem Which of the currencies to be used as fee\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain, to set the\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\n    function transfer_multi_assets(\n        MultiAsset[] memory assets,\n        uint32 feeItem,\n        Multilocation memory destination,\n        WeightV2 memory weight\n    ) external returns (bool);\n\n    /**\n     * @param destination - Multilocation of destination chain where to send this call\n     * @param xcm_call - encoded xcm call you want to send to destination\n     **/\n    function send_xcm(\n        Multilocation memory destination,\n        bytes memory xcm_call\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/XCM.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\n/**\n * @title XCM interface.\n */\ninterface XCM {\n    /**\n     * @dev Withdraw assets using PalletXCM call.\n     * @param asset_id - list of XC20 asset addresses\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\n     * @param recipient_account_id - SS58 public key of the destination account\n     * @param is_relay - set `true` for using relay chain as reserve\n     * @param parachain_id - set parachain id of reserve parachain (when is_relay set to false)\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\n     * @return bool confirmation whether the XCM message sent.\n     *\n     * How method check that assets list is valid:\n     * - all assets resolved to multi-location (on runtime level)\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\n     */\n    function assets_withdraw(\n        address[] calldata asset_id,\n        uint256[] calldata asset_amount,\n        bytes32 recipient_account_id,\n        bool is_relay,\n        uint256 parachain_id,\n        uint256 fee_index\n    ) external returns (bool);\n\n    /**\n     * @dev Withdraw assets using PalletXCM call.\n     * @param asset_id - list of XC20 asset addresses\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\n     * @param recipient_account_id - ETH address of the destination account\n     * @param is_relay - set `true` for using relay chain as reserve\n     * @param parachain_id - set parachain id of reserve parachain (when is_relay set to false)\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\n     * @return bool confirmation whether the XCM message sent.\n     *\n     * How method check that assets list is valid:\n     * - all assets resolved to multi-location (on runtime level)\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\n     */\n    function assets_withdraw(\n        address[] calldata asset_id,\n        uint256[] calldata asset_amount,\n        address recipient_account_id,\n        bool is_relay,\n        uint256 parachain_id,\n        uint256 fee_index\n    ) external returns (bool);\n\n    /**\n     * @dev Execute a transaction on a remote chain.\n     * @param parachain_id - destination parachain Id (ignored if is_relay is true)\n     * @param is_relay - if true, destination is relay_chain, if false it is parachain (see previous argument)\n     * @param payment_asset_id - ETH address of the local asset derivate used to pay for execution in the destination chain\n     * @param payment_amount - amount of payment asset to use for execution payment - should cover cost of XCM instructions + Transact call weight.\n     * @param call - encoded call data (must be decodable by remote chain)\n     * @param transact_weight - max weight that the encoded call is allowed to consume in the destination chain\n     * @return bool confirmation whether the XCM message sent.\n     */\n    function remote_transact(\n        uint256 parachain_id,\n        bool is_relay,\n        address payment_asset_id,\n        uint256 payment_amount,\n        bytes calldata call,\n        uint64 transact_weight\n    ) external returns (bool);\n\n    /**\n     * @dev Reserve transfer assets using PalletXCM call.\n     * @param asset_id - list of XC20 asset addresses\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\n     * @param recipient_account_id - SS58 public key of the destination account\n     * @param is_relay - set `true` for using relay chain as destination\n     * @param parachain_id - set parachain id of destination parachain (when is_relay set to false)\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\n     * @return A boolean confirming whether the XCM message sent.\n     *\n     * How method check that assets list is valid:\n     * - all assets resolved to multi-location (on runtime level)\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\n     */\n    function assets_reserve_transfer(\n        address[] calldata asset_id,\n        uint256[] calldata asset_amount,\n        bytes32 recipient_account_id,\n        bool is_relay,\n        uint256 parachain_id,\n        uint256 fee_index\n    ) external returns (bool);\n\n    /**\n     * @dev Reserve transfer using PalletXCM call.\n     * @param asset_id - list of XC20 asset addresses\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\n     * @param recipient_account_id - ETH address of the destination account\n     * @param is_relay - set `true` for using relay chain as destination\n     * @param parachain_id - set parachain id of destination parachain (when is_relay set to false)\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\n     * @return A boolean confirming whether the XCM message sent.\n     *\n     * How method check that assets list is valid:\n     * - all assets resolved to multi-location (on runtime level)\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\n     */\n    function assets_reserve_transfer(\n        address[] calldata asset_id,\n        uint256[] calldata asset_amount,\n        address recipient_account_id,\n        bool is_relay,\n        uint256 parachain_id,\n        uint256 fee_index\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/XcmTransactorV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\n/// @dev The XcmTransactorV2 contract's address.\naddress constant XCM_TRANSACTOR_V2_ADDRESS = 0x000000000000000000000000000000000000080D;\n\n/// @dev The XcmTransactorV2 contract's instance.\nXcmTransactorV2 constant XCM_TRANSACTOR_V2_CONTRACT = XcmTransactorV2(\n    XCM_TRANSACTOR_V2_ADDRESS\n);\n\n/// @author The Moonbeam Team\n/// @title Xcm Transactor Interface\n/// The interface through which solidity contracts will interact with xcm transactor pallet\n/// @custom:address 0x000000000000000000000000000000000000080D\ninterface XcmTransactorV2 {\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\n    struct Multilocation {\n        uint8 parents;\n        bytes[] interior;\n    }\n\n    /// Get index of an account in xcm transactor\n    /// @custom:selector 3fdc4f36\n    /// @param index The index of which we want to retrieve the account\n    /// @return owner The owner of the derivative index\n    ///\n    function indexToAccount(uint16 index) external view returns (address owner);\n\n    /// Get transact info of a multilocation\n    /// @custom:selector b689e20c\n    /// @param multilocation The location for which we want to know the transact info\n    /// @return transactExtraWeight The extra weight involved in the XCM message of using derivative\n    /// @return transactExtraWeightSigned The extra weight involved in the XCM message of using signed\n    /// @return maxWeight Maximum allowed weight for a single message in dest\n    ///\n    function transactInfoWithSigned(\n        Multilocation memory multilocation\n    )\n        external\n        view\n        returns (\n            uint64 transactExtraWeight,\n            uint64 transactExtraWeightSigned,\n            uint64 maxWeight\n        );\n\n    /// Get fee per second charged in its reserve chain for an asset\n    /// @custom:selector 906c9990\n    /// @param multilocation The asset location for which we want to know the fee per second value\n    /// @return feePerSecond The fee per second that the reserve chain charges for this asset\n    ///\n    function feePerSecond(\n        Multilocation memory multilocation\n    ) external view returns (uint256 feePerSecond);\n\n    /// Transact through XCM using fee based on its multilocation\n    /// @custom:selector fe430475\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param transactor The transactor to be used\n    /// @param index The index to be used\n    /// @param feeAsset The asset in which we want to pay fees.\n    /// It has to be a reserve of the destination chain\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\n    /// @param innerCall The inner call to be executed in the destination chain\n    /// @param feeAmount Amount to be used as fee.\n    /// @param overallWeight Overall weight to be used for the xcm message.\n    ///\n    function transactThroughDerivativeMultilocation(\n        uint8 transactor,\n        uint16 index,\n        Multilocation memory feeAsset,\n        uint64 transactRequiredWeightAtMost,\n        bytes memory innerCall,\n        uint256 feeAmount,\n        uint64 overallWeight\n    ) external;\n\n    /// Transact through XCM using fee based on its currency_id\n    /// @custom:selector 185de2ae\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param transactor The transactor to be used\n    /// @param index The index to be used\n    /// @param currencyId Address of the currencyId of the asset to be used for fees\n    /// It has to be a reserve of the destination chain\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\n    /// @param innerCall The inner call to be executed in the destination chain\n    /// @param feeAmount Amount to be used as fee.\n    /// @param overallWeight Overall weight to be used for the xcm message.\n    function transactThroughDerivative(\n        uint8 transactor,\n        uint16 index,\n        address currencyId,\n        uint64 transactRequiredWeightAtMost,\n        bytes memory innerCall,\n        uint256 feeAmount,\n        uint64 overallWeight\n    ) external;\n\n    /// Transact through XCM using fee based on its multilocation through signed origins\n    /// @custom:selector d7ab340c\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\n    /// dispatch the call\n    /// @param dest The destination chain (as multilocation) where to send the message\n    /// @param feeLocation The asset multilocation that indentifies the fee payment currency\n    /// It has to be a reserve of the destination chain\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\n    /// @param call The call to be executed in the destination chain\n    /// @param feeAmount Amount to be used as fee.\n    /// @param overallWeight Overall weight to be used for the xcm message.\n    function transactThroughSignedMultilocation(\n        Multilocation memory dest,\n        Multilocation memory feeLocation,\n        uint64 transactRequiredWeightAtMost,\n        bytes memory call,\n        uint256 feeAmount,\n        uint64 overallWeight\n    ) external;\n\n    /// Transact through XCM using fee based on its erc20 address through signed origins\n    /// @custom:selector b648f3fe\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\n    /// dispatch the call\n    /// @param dest The destination chain (as multilocation) where to send the message\n    /// @param feeLocationAddress The ERC20 address of the token we want to use to pay for fees\n    /// only callable if such an asset has been BRIDGED to our chain\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\n    /// @param call The call to be executed in the destination chain\n    /// @param feeAmount Amount to be used as fee.\n    /// @param overallWeight Overall weight to be used for the xcm message.\n    function transactThroughSigned(\n        Multilocation memory dest,\n        address feeLocationAddress,\n        uint64 transactRequiredWeightAtMost,\n        bytes memory call,\n        uint256 feeAmount,\n        uint64 overallWeight\n    ) external;\n}\n"
    },
    "contracts/interfaces/Xtokens.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\n/// @dev The Xtokens contract's address.\naddress constant XTOKENS_ADDRESS = 0x0000000000000000000000000000000000000804;\n\n/// @dev The Xtokens contract's instance.\nXtokens constant XTOKENS_CONTRACT = Xtokens(XTOKENS_ADDRESS);\n\n/// @author The Moonbeam Team\n/// @title Xtokens Interface\n/// @dev The interface through which solidity contracts will interact with xtokens pallet\n/// @custom:address 0x0000000000000000000000000000000000000804\ninterface Xtokens {\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\n    struct Multilocation {\n        uint8 parents;\n        bytes[] interior;\n    }\n\n    // A MultiAsset is defined by a multilocation and an amount\n    struct MultiAsset {\n        Multilocation location;\n        uint256 amount;\n    }\n\n    // A Currency is defined by address and the amount to be transferred\n    struct Currency {\n        address currencyAddress;\n        uint256 amount;\n    }\n\n    /// Transfer a token through XCM based on its currencyId\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector b9f813ff\n    function transfer(\n        address currencyAddress,\n        uint256 amount,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its currencyId specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector 3e506ef0\n    function transferWithFee(\n        address currencyAddress,\n        uint256 amount,\n        uint256 fee,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its MultiLocation\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param asset The asset we want to transfer, defined by its multilocation.\n    /// Currently only Concrete Fungible assets\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector b4f76f96\n    function transferMultiasset(\n        Multilocation memory asset,\n        uint256 amount,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param asset The asset we want to transfer, defined by its multilocation.\n    /// Currently only Concrete Fungible assets\n    /// @param amount The amount of tokens we want to transfer\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param destination The weight we want to buy in the destination chain\n    /// @custom:selector 150c016a\n    function transferMultiassetWithFee(\n        Multilocation memory asset,\n        uint256 amount,\n        uint256 fee,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer several tokens at once through XCM based on its address specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\n    /// @param feeItem Which of the currencies to be used as fee\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain\n    /// @custom:selector ab946323\n    function transferMultiCurrencies(\n        Currency[] memory currencies,\n        uint32 feeItem,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n\n    /// Transfer several tokens at once through XCM based on its location specifying fee\n    ///\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\n    /// @param assets The assets we want to transfer, defined by their location and amount.\n    /// @param feeItem Which of the currencies to be used as fee\n    /// @param destination The Multilocation to which we want to send the tokens\n    /// @param weight The weight we want to buy in the destination chain\n    /// @custom:selector 797b45fd\n    function transferMultiAssets(\n        MultiAsset[] memory assets,\n        uint32 feeItem,\n        Multilocation memory destination,\n        uint64 weight\n    ) external;\n}\n"
    },
    "contracts/MantaPacificSlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"./interfaces/Types.sol\";\n\ncontract MantaPacificSlpx is Ownable {\n    address public constant mantaOFT =\n        0x17313cE6e47D796E61fDeAc34Ab1F58e3e089082;\n    address public constant vMantaOFT =\n        0x7746ef546d562b443AE4B4145541a3b1a3D75717;\n    address public constant manta = 0x95CeF13441Be50d20cA4558CC0a27B601aC544E5;\n    uint16 public constant destChainId = 126;\n    bytes32 public remoteContract;\n    uint256 public minAmount;\n\n    event Mint(address indexed caller, uint256 indexed amount);\n    event Redeem(address indexed caller, uint256 indexed amount);\n\n    function setRemoteContract(address _remoteContract) public onlyOwner {\n        require(_remoteContract != address(0), \"Invalid remoteContract\");\n        remoteContract = bytes32(uint256(uint160(_remoteContract)));\n    }\n\n    function setMinAmount(uint256 _minAmount) public onlyOwner {\n        require(_minAmount != 0, \"Invalid minAmount\");\n        minAmount = _minAmount;\n    }\n\n    function create_order(\n        address assetAddress,\n        uint256 amount,\n        uint32 channel_id,\n        uint64 dstGasForCall,\n        bytes calldata adapterParams\n    ) external payable {\n        require(amount >= minAmount, \"amount too small\");\n\n        address oft;\n        address sender;\n\n        if (assetAddress == manta) {\n            IERC20(assetAddress).transferFrom(\n                _msgSender(),\n                address(this),\n                amount\n            );\n            IERC20(assetAddress).approve(mantaOFT, amount);\n            oft = mantaOFT;\n            sender = address(this);\n        } else if (assetAddress == vMantaOFT) {\n            oft = vMantaOFT;\n            sender = _msgSender();\n        } else {\n            revert(\"Invalid assetAddress\");\n        }\n\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(sender),\n            address(0),\n            adapterParams\n        );\n\n        bytes memory payload = abi.encode(_msgSender(), channel_id);\n        (uint256 estimateFee, ) = IOFTV2(oft).estimateSendAndCallFee(\n            destChainId,\n            remoteContract,\n            amount,\n            payload,\n            dstGasForCall,\n            false,\n            adapterParams\n        );\n\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n\n        IOFTV2(oft).sendAndCall{value: estimateFee}(\n            sender,\n            destChainId,\n            remoteContract,\n            amount,\n            payload,\n            dstGasForCall,\n            callParams\n        );\n\n        if (assetAddress == manta) {\n            emit Mint(_msgSender(), amount);\n        } else {\n            emit Redeem(_msgSender(), amount);\n        }\n    }\n\n    function estimateSendAndCallFee(\n        address assetAddress,\n        uint256 amount,\n        uint32 channel_id,\n        uint64 dstGasForCall,\n        bytes calldata adapterParams\n    ) public view returns (uint256) {\n        address oft;\n\n        if (assetAddress == manta) {\n            oft = mantaOFT;\n        } else if (assetAddress == vMantaOFT) {\n            oft = vMantaOFT;\n        } else {\n            revert(\"Invalid assetAddress\");\n        }\n\n        bytes memory payload = abi.encode(_msgSender(), channel_id);\n        (uint256 estimateFee, ) = IOFTV2(oft).estimateSendAndCallFee(\n            destChainId,\n            remoteContract,\n            amount,\n            payload,\n            dstGasForCall,\n            false,\n            adapterParams\n        );\n\n        return estimateFee;\n    }\n}\n"
    },
    "contracts/MoonbeamReceiver.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"./interfaces/IOFTReceiverV2.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"./interfaces/ISlpx.sol\";\nimport \"./DerivativeContract.sol\";\nimport \"./MoonbeamSlpx.sol\";\nimport \"./utils/BuildCallData.sol\";\nimport \"./utils/AddressToAccount.sol\";\nimport \"./interfaces/Xtokens.sol\";\nimport \"./interfaces/XcmTransactorV2.sol\";\n\ncontract MoonbeamReceiver is Ownable, IOFTReceiverV2 {\n    uint16 public constant destChainId = 217;\n\n    address public constant VMANTA = 0xFFfFFfFfdA2a05FB50e7ae99275F4341AEd43379;\n    address public constant MANTA = 0xfFFffFFf7D3875460d4509eb8d0362c611B4E841;\n    address public constant BNC = 0xFFffffFf7cC06abdF7201b350A1265c62C8601d2;\n    bytes2 private constant MANTA_CURRENCY_ID = 0x0808;\n    bytes2 private constant VMANTA_CURRENCY_ID = 0x0908;\n    bytes1 private constant MOONBEAM_CHAIN_TYPE = 0x01;\n    address public constant slpx = 0xF1d4797E51a4640a76769A50b57abE7479ADd3d8;\n    address public constant mantaOFT =\n        0x17313cE6e47D796E61fDeAc34Ab1F58e3e089082;\n    address public constant vMantaProxyOFT =\n        0xDeBBb9309d95DaBbFb82411a9C6Daa3909B164A4;\n    address internal constant XTOKENS =\n        0x0000000000000000000000000000000000000804;\n    address internal constant XCM_TRANSACTORV2_ADDRESS =\n        0x000000000000000000000000000000000000080D;\n    address public mantaPacificSlpx;\n    uint256 public layerZeroFee;\n    address public scriptTrigger;\n    mapping(address => address) public callerToDerivativeAddress;\n\n    event SetDerivativeAddress(\n        address indexed caller,\n        address indexed derivativeAddress\n    );\n    event SetLayerZeroFee(\n        address indexed scriptTrigger,\n        uint256 indexed layerZeroFee\n    );\n    event SetScriptTrigger(address indexed scriptTrigger);\n\n    function xcmTransferAsset(\n        address assetAddress,\n        address to,\n        uint256 amount\n    ) internal {\n        require(assetAddress != address(0), \"Invalid assetAddress\");\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(to);\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\n            publicKey\n        );\n        Xtokens(XTOKENS).transfer(\n            assetAddress,\n            amount,\n            dest_account,\n            type(uint64).max\n        );\n    }\n\n    function getXtokensDestination(\n        bytes32 publicKey\n    ) internal pure returns (Xtokens.Multilocation memory) {\n        bytes[] memory interior = new bytes[](2);\n        interior[0] = bytes.concat(hex\"00\", bytes4(uint32(2030)));\n        interior[1] = bytes.concat(hex\"01\", publicKey, hex\"00\");\n        Xtokens.Multilocation memory dest = Xtokens.Multilocation({\n            parents: 1,\n            interior: interior\n        });\n        return dest;\n    }\n\n    function getXcmTransactorDestination()\n        internal\n        pure\n        returns (XcmTransactorV2.Multilocation memory)\n    {\n        bytes[] memory interior = new bytes[](1);\n        interior[0] = bytes.concat(hex\"00\", bytes4(uint32(2030)));\n        XcmTransactorV2.Multilocation\n            memory xcmTransactorDestination = XcmTransactorV2.Multilocation({\n                parents: 1,\n                interior: interior\n            });\n        return xcmTransactorDestination;\n    }\n\n    function create_order(\n        address caller,\n        address assetAddress,\n        bytes2 token,\n        uint128 amount,\n        address receiver,\n        uint32 channel_id\n    ) internal {\n        require(amount > 0, \"amount must be greater than 0\");\n        xcmTransferAsset(assetAddress, caller, uint256(amount));\n\n        // Build bifrost slpx create order call data\n        bytes memory callData = BuildCallData.buildCreateOrderCallBytes(\n            caller,\n            block.chainid,\n            block.number,\n            token,\n            amount,\n            abi.encodePacked(MOONBEAM_CHAIN_TYPE, receiver),\n            \"MantaPacificV2\",\n            channel_id\n        );\n        // XCM Transact\n        (\n            uint64 transactRequiredWeightAtMost,\n            uint256 feeAmount,\n            uint64 overallWeight\n        ) = MoonbeamSlpx(slpx).operationToFeeInfo(MoonbeamSlpx.Operation.Mint);\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            getXcmTransactorDestination(),\n            BNC,\n            transactRequiredWeightAtMost,\n            callData,\n            feeAmount,\n            overallWeight\n        );\n    }\n\n    function setRemoteContract(address _mantaPacificSlpx) public onlyOwner {\n        require(_mantaPacificSlpx != address(0), \"Invalid mantaPacificSlpx\");\n        mantaPacificSlpx = _mantaPacificSlpx;\n    }\n\n    function onOFTReceived(\n        uint16 srcChainId,\n        bytes calldata,\n        uint64,\n        bytes32 from,\n        uint amount,\n        bytes calldata payload\n    ) external override {\n        require(\n            srcChainId == destChainId,\n            \"only receive msg from manta pacific\"\n        );\n        require(\n            _msgSender() == mantaOFT || _msgSender() == vMantaProxyOFT,\n            \"only native oft can call\"\n        );\n        require(\n            address(uint160(uint(from))) == mantaPacificSlpx,\n            \"only receive msg from mantaPacificSlpx\"\n        );\n        (address caller, uint32 channel_id) = abi.decode(\n            payload,\n            (address, uint32)\n        );\n\n        if (callerToDerivativeAddress[caller] == address(0)) {\n            setDerivativeAddress(caller);\n        }\n\n        // vManta:\n        // msg.sender = vMantaProxyOFT, from = mantaPacificSlpx,\n        // Manta:\n        // msg.sender = mantaOFT, from = mantaPacificSlpx\n        address asset_address;\n        if (_msgSender() == mantaOFT) {\n            bool success = IERC20(MANTA).transfer(scriptTrigger, layerZeroFee);\n            require(success, \"failed to charge\");\n            asset_address = MANTA;\n        } else if (_msgSender() == vMantaProxyOFT) {\n            bool success = IERC20(VMANTA).transfer(scriptTrigger, layerZeroFee);\n            require(success, \"failed to charge\");\n            asset_address = VMANTA;\n        } else {\n            revert(\"invalid msg.sender\");\n        }\n\n        create_order(\n            caller,\n            asset_address,\n            asset_address == MANTA ? MANTA_CURRENCY_ID : VMANTA_CURRENCY_ID,\n            uint128(amount - layerZeroFee),\n            callerToDerivativeAddress[caller],\n            channel_id\n        );\n    }\n\n    function claimVManta(\n        address addr,\n        bytes calldata _adapterParams\n    ) external payable {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        address derivativeAddress = callerToDerivativeAddress[addr];\n        require(derivativeAddress != address(0), \"invalid address\");\n        uint256 amount = DerivativeContract(derivativeAddress)\n            .withdrawErc20Token(VMANTA);\n        IERC20(VMANTA).approve(vMantaProxyOFT, amount);\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(_msgSender()),\n            address(0),\n            _adapterParams\n        );\n        bytes32 toAddress = bytes32(uint256(uint160(addr)));\n        (uint256 estimateFee, ) = IOFTV2(vMantaProxyOFT).estimateSendFee(\n            destChainId,\n            toAddress,\n            amount,\n            false,\n            _adapterParams\n        );\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n        IOFTV2(vMantaProxyOFT).sendFrom{value: estimateFee}(\n            address(this),\n            destChainId,\n            toAddress,\n            amount,\n            callParams\n        );\n    }\n\n    function claimManta(\n        address addr,\n        bytes calldata _adapterParams\n    ) external payable {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        address derivativeAddress = callerToDerivativeAddress[addr];\n        require(derivativeAddress != address(0), \"invalid address\");\n        uint256 amount = DerivativeContract(derivativeAddress)\n            .withdrawErc20Token(MANTA);\n        IERC20(MANTA).approve(mantaOFT, amount);\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(_msgSender()),\n            address(0),\n            _adapterParams\n        );\n        bytes32 toAddress = bytes32(uint256(uint160(addr)));\n        (uint256 estimateFee, ) = IOFTV2(mantaOFT).estimateSendFee(\n            destChainId,\n            toAddress,\n            amount,\n            false,\n            _adapterParams\n        );\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n        IOFTV2(mantaOFT).sendFrom{value: estimateFee}(\n            address(this),\n            destChainId,\n            toAddress,\n            amount,\n            callParams\n        );\n    }\n\n    function setDerivativeAddress(address addr) public {\n        require(\n            callerToDerivativeAddress[addr] == address(0),\n            \"already set derivativeAddress\"\n        );\n        bytes memory bytecode = type(DerivativeContract).creationCode;\n        bytes32 salt = bytes32(uint256(uint160(addr)));\n        address derivativeAddress = Create2.deploy(0, salt, bytecode);\n        callerToDerivativeAddress[addr] = derivativeAddress;\n        emit SetDerivativeAddress(addr, derivativeAddress);\n    }\n\n    function setLayerZeroFee(uint256 _layerZeroFee) external {\n        require(_msgSender() == scriptTrigger, \"must be scriptTrigger\");\n        layerZeroFee = _layerZeroFee;\n        emit SetLayerZeroFee(scriptTrigger, _layerZeroFee);\n    }\n\n    function setScriptTrigger(address _scriptTrigger) external onlyOwner {\n        require(_scriptTrigger != address(0), \"invalid address\");\n        scriptTrigger = _scriptTrigger;\n        emit SetScriptTrigger(_scriptTrigger);\n    }\n}\n"
    },
    "contracts/MoonbeamSlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"./interfaces/XcmTransactorV2.sol\";\nimport \"./interfaces/Xtokens.sol\";\nimport \"./interfaces/ISlpx.sol\";\nimport \"./utils/AddressToAccount.sol\";\nimport \"./utils/BuildCallData.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\ncontract MoonbeamSlpx is ISlpx, OwnableUpgradeable, PausableUpgradeable {\n    address internal constant NATIVE_ASSET_ADDRESS =\n        0x0000000000000000000000000000000000000802;\n    address internal constant XCM_TRANSACTORV2_ADDRESS =\n        0x000000000000000000000000000000000000080D;\n    address internal constant XTOKENS =\n        0x0000000000000000000000000000000000000804;\n    bytes1 internal constant MOONBEAM_CHAIN = 0x01;\n\n    XcmTransactorV2.Multilocation internal xcmTransactorDestination;\n\n    address public BNCAddress;\n    uint32 public bifrostParaId;\n\n    enum Operation {\n        Mint,\n        Redeem,\n        ZenlinkSwap,\n        StableSwap\n    }\n\n    struct AssetInfo {\n        bytes2 currencyId;\n        uint256 operationalMin;\n    }\n\n    struct FeeInfo {\n        uint64 transactRequiredWeightAtMost;\n        uint256 feeAmount;\n        uint64 overallWeight;\n    }\n\n    mapping(address => AssetInfo) public addressToAssetInfo;\n    mapping(Operation => FeeInfo) public operationToFeeInfo;\n\n    struct DestChainInfo {\n        bool is_evm;\n        bool is_substrate;\n        bytes1 raw_chain_index;\n    }\n    mapping(uint64 => DestChainInfo) public destChainInfo;\n\n    function checkAssetIsExist(\n        address assetAddress\n    ) internal view returns (bytes2) {\n        AssetInfo memory assetInfo = addressToAssetInfo[assetAddress];\n        require(assetInfo.operationalMin > 0, \"Asset is not exist\");\n        require(assetInfo.currencyId != bytes2(0), \"Invalid asset\");\n        return assetInfo.currencyId;\n    }\n\n    function checkFeeInfo(\n        Operation operation\n    ) internal view returns (FeeInfo memory) {\n        FeeInfo memory feeInfo = operationToFeeInfo[operation];\n        require(\n            feeInfo.transactRequiredWeightAtMost > 0,\n            \"Invalid transactRequiredWeightAtMost\"\n        );\n        require(feeInfo.feeAmount > 0, \"Invalid feeAmount\");\n        require(feeInfo.overallWeight > 0, \"Invalid overallWeight\");\n        return feeInfo;\n    }\n\n    function initialize(\n        address _BNCAddress,\n        uint32 _bifrostParaId,\n        bytes2 _nativeCurrencyId\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        require(_BNCAddress != address(0), \"Invalid address\");\n        require(\n            _bifrostParaId == 2001 || _bifrostParaId == 2030,\n            \"Invalid bifrostParaId\"\n        );\n        require(\n            _nativeCurrencyId == 0x020a || _nativeCurrencyId == 0x0801,\n            \"Invalid nativeCurrencyId\"\n        );\n\n        setAssetAddressInfo(_BNCAddress, 0x0001, 1_000_000_000_000);\n        setAssetAddressInfo(\n            NATIVE_ASSET_ADDRESS,\n            _nativeCurrencyId,\n            1_000_000_000_000_000_000\n        );\n\n        BNCAddress = _BNCAddress;\n        bifrostParaId = _bifrostParaId;\n\n        // Init xcmTransactorDestination\n        bytes[] memory interior = new bytes[](1);\n        // Parachain: 2001/2030\n        interior[0] = bytes.concat(hex\"00\", bytes4(_bifrostParaId));\n        xcmTransactorDestination = XcmTransactorV2.Multilocation({\n            parents: 1,\n            interior: interior\n        });\n    }\n\n    function setOperationToFeeInfo(\n        Operation _operation,\n        uint64 _transactRequiredWeightAtMost,\n        uint64 _overallWeight,\n        uint256 _feeAmount\n    ) public onlyOwner {\n        operationToFeeInfo[_operation] = FeeInfo(\n            _transactRequiredWeightAtMost,\n            _feeAmount,\n            _overallWeight\n        );\n    }\n\n    function setAssetAddressInfo(\n        address assetAddress,\n        bytes2 currencyId,\n        uint256 minimumValue\n    ) public onlyOwner {\n        require(assetAddress != address(0), \"Invalid assetAddress\");\n        require(minimumValue != 0, \"Invalid minimumValue\");\n        require(currencyId != bytes2(0), \"Invalid currencyId\");\n        AssetInfo storage assetInfo = addressToAssetInfo[assetAddress];\n        assetInfo.currencyId = currencyId;\n        assetInfo.operationalMin = minimumValue;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\n        require(assetAddress != address(0), \"Invalid assetAddress\");\n        require(\n            amount >= addressToAssetInfo[assetAddress].operationalMin,\n            \"Less than MinimumValue\"\n        );\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\n            _msgSender()\n        );\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\n            publicKey\n        );\n        IERC20 asset = IERC20(assetAddress);\n        asset.transferFrom(_msgSender(), address(this), amount);\n        Xtokens(XTOKENS).transfer(\n            assetAddress,\n            amount,\n            dest_account,\n            type(uint64).max\n        );\n    }\n\n    function xcmTransferNativeAsset(uint256 amount) internal {\n        require(\n            amount >= addressToAssetInfo[NATIVE_ASSET_ADDRESS].operationalMin,\n            \"Less than MinimumValue\"\n        );\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\n            _msgSender()\n        );\n\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\n            publicKey\n        );\n        Xtokens(XTOKENS).transfer(\n            NATIVE_ASSET_ADDRESS,\n            amount,\n            dest_account,\n            type(uint64).max\n        );\n    }\n\n    function mintVNativeAsset(\n        address receiver,\n        string memory remark\n    ) external payable override whenNotPaused {\n        require(bytes(remark).length <= 32, \"remark too long\");\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\n        // xtokens call\n        xcmTransferNativeAsset(msg.value);\n\n        // Build bifrost xcm-action mint call data\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintCallBytes(\n            _msgSender(),\n            nativeToken,\n            targetChain,\n            remark\n        );\n        // XCM Transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            feeInfo.transactRequiredWeightAtMost,\n            callData,\n            feeInfo.feeAmount,\n            feeInfo.overallWeight\n        );\n        emit Mint(\n            _msgSender(),\n            NATIVE_ASSET_ADDRESS,\n            msg.value,\n            receiver,\n            callData,\n            remark\n        );\n    }\n\n    function mintVAsset(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark\n    ) external override whenNotPaused {\n        require(bytes(remark).length <= 32, \"remark too long\");\n\n        bytes2 token = checkAssetIsExist(assetAddress);\n\n        // xtokens call\n        xcmTransferAsset(assetAddress, amount);\n\n        // Build bifrost xcm-action mint call data\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintCallBytes(\n            _msgSender(),\n            token,\n            targetChain,\n            remark\n        );\n        // XCM Transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            feeInfo.transactRequiredWeightAtMost,\n            callData,\n            feeInfo.feeAmount,\n            feeInfo.overallWeight\n        );\n        emit Mint(\n            _msgSender(),\n            assetAddress,\n            amount,\n            receiver,\n            callData,\n            remark\n        );\n    }\n\n    function mintVNativeAssetWithChannelId(\n        address receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external payable override whenNotPaused {\n        require(bytes(remark).length <= 32, \"remark too long\");\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\n        // xtokens call\n        xcmTransferNativeAsset(msg.value);\n\n        // Build bifrost xcm-action mint call data\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintWithChannelIdCallBytes(\n            _msgSender(),\n            nativeToken,\n            targetChain,\n            remark,\n            channel_id\n        );\n        // XCM Transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            feeInfo.transactRequiredWeightAtMost,\n            callData,\n            feeInfo.feeAmount,\n            feeInfo.overallWeight\n        );\n        emit Mint(\n            _msgSender(),\n            NATIVE_ASSET_ADDRESS,\n            msg.value,\n            receiver,\n            callData,\n            remark\n        );\n    }\n\n    function mintVAssetWithChannelId(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external override whenNotPaused {\n        require(bytes(remark).length <= 32, \"remark too long\");\n\n        bytes2 token = checkAssetIsExist(assetAddress);\n\n        // xtokens call\n        xcmTransferAsset(assetAddress, amount);\n\n        // Build bifrost xcm-action mint call data\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildMintWithChannelIdCallBytes(\n            _msgSender(),\n            token,\n            targetChain,\n            remark,\n            channel_id\n        );\n        // XCM Transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            feeInfo.transactRequiredWeightAtMost,\n            callData,\n            feeInfo.feeAmount,\n            feeInfo.overallWeight\n        );\n        emit Mint(\n            _msgSender(),\n            assetAddress,\n            amount,\n            receiver,\n            callData,\n            remark\n        );\n    }\n\n    function redeemAsset(\n        address vAssetAddress,\n        uint256 amount,\n        address receiver\n    ) external override whenNotPaused {\n        bytes2 vtoken = checkAssetIsExist(vAssetAddress);\n\n        // xtokens call\n        xcmTransferAsset(vAssetAddress, amount);\n\n        // xcm transactor call\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(\n            _msgSender(),\n            vtoken,\n            targetChain\n        );\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Redeem);\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            feeInfo.transactRequiredWeightAtMost,\n            callData,\n            feeInfo.feeAmount,\n            feeInfo.overallWeight\n        );\n        emit Redeem(_msgSender(), vAssetAddress, amount, receiver, callData);\n    }\n\n    function getXtokensDestination(\n        bytes32 publicKey\n    ) internal view returns (Xtokens.Multilocation memory) {\n        bytes[] memory interior = new bytes[](2);\n        // Parachain: 2001/2030\n        interior[0] = bytes.concat(hex\"00\", bytes4(bifrostParaId));\n        // AccountId32: { id: public_key , network: any }\n        interior[1] = bytes.concat(hex\"01\", publicKey, hex\"00\");\n        Xtokens.Multilocation memory dest = Xtokens.Multilocation({\n            parents: 1,\n            interior: interior\n        });\n\n        return dest;\n    }\n\n    function setDestChainInfo(\n        uint64 dest_chain_id,\n        bool is_evm,\n        bool is_substrate,\n        bytes1 raw_chain_index\n    ) public onlyOwner {\n        require(\n            !(is_evm && is_substrate),\n            \"Both is_evm and is_substrate cannot be true\"\n        );\n        DestChainInfo storage chainInfo = destChainInfo[dest_chain_id];\n        chainInfo.is_evm = is_evm;\n        chainInfo.is_substrate = is_substrate;\n        chainInfo.raw_chain_index = raw_chain_index;\n    }\n\n    /**\n     * @dev Create order to mint vAsset or redeem vAsset on bifrost chain\n     * @param assetAddress The address of the asset to mint or redeem\n     * @param amount The amount of the asset to mint or redeem\n     * @param dest_chain_id When order is executed, Asset/vAsset will be transferred to this chain\n     * @param receiver The receiver address on the destination chain, 20 bytes for EVM, 32 bytes for Substrate\n     * @param remark The remark of the order, less than 32 bytes. For example, \"OmniLS\"\n     * @param channel_id The channel id of the order, you can set it. Bifrost chain will use it to share reward.\n     **/\n    function create_order(\n        address assetAddress,\n        uint128 amount,\n        uint64 dest_chain_id,\n        bytes memory receiver,\n        string memory remark,\n        uint32 channel_id\n    ) external payable override {\n        require(\n            bytes(remark).length > 0 && bytes(remark).length <= 32,\n            \"remark must be less than 32 bytes and not empty\"\n        );\n        require(amount > 0, \"amount must be greater than 0\");\n\n        DestChainInfo memory chainInfo = destChainInfo[dest_chain_id];\n        if (chainInfo.is_evm) {\n            require(receiver.length == 20, \"evm address must be 20 bytes\");\n        } else if (chainInfo.is_substrate) {\n            require(\n                receiver.length == 32,\n                \"substrate public key must be 32 bytes\"\n            );\n        } else {\n            revert(\"Destination chain is not supported\");\n        }\n\n        bytes2 token = checkAssetIsExist(assetAddress);\n\n        // Transfer asset to bifrost chain\n        if (assetAddress == NATIVE_ASSET_ADDRESS) {\n            amount = uint128(msg.value);\n            xcmTransferNativeAsset(uint256(amount));\n        } else {\n            xcmTransferAsset(assetAddress, uint256(amount));\n        }\n\n        // Build bifrost slpx create order call data\n        bytes memory callData = BuildCallData.buildCreateOrderCallBytes(\n            _msgSender(),\n            block.chainid,\n            block.number,\n            token,\n            amount,\n            abi.encodePacked(chainInfo.raw_chain_index, receiver),\n            remark,\n            channel_id\n        );\n        // XCM Transact\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\n            xcmTransactorDestination,\n            BNCAddress,\n            feeInfo.transactRequiredWeightAtMost,\n            callData,\n            feeInfo.feeAmount,\n            feeInfo.overallWeight\n        );\n        emit CreateOrder(\n            assetAddress,\n            amount,\n            dest_chain_id,\n            receiver,\n            remark,\n            channel_id\n        );\n    }\n}\n"
    },
    "contracts/OFTs/BncOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\";\n\ncontract BncOFT is OFTV2 {\n    constructor(\n        address _lzEndpoint\n    ) OFTV2(\"Bifrost Native Coin\", \"BNC\", 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/OFTs/BncProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ProxyOFTV2.sol\";\n\ncontract BncProxyOFT is ProxyOFTV2 {\n    constructor(\n        address token,\n        address _lzEndpoint\n    ) ProxyOFTV2(token, 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/OFTs/MantaProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ProxyOFTV2.sol\";\n\ncontract MantaProxyOFT is ProxyOFTV2 {\n    constructor(\n        address token,\n        address _lzEndpoint\n    ) ProxyOFTV2(token, 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/OFTs/VoucherAstrOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\";\n\ncontract VoucherAstrOFT is OFTV2 {\n    constructor(\n        address _lzEndpoint\n    ) OFTV2(\"Bifrost Voucher ASTR\", \"vASTR\", 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/OFTs/VoucherAstrProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ProxyOFTV2.sol\";\n\ncontract VoucherAstrProxyOFT is ProxyOFTV2 {\n    constructor(\n        address token,\n        address _lzEndpoint\n    ) ProxyOFTV2(token, 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/OFTs/VoucherDotOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\";\n\ncontract VoucherDotOFT is OFTV2 {\n    constructor(\n        address _lzEndpoint\n    ) OFTV2(\"Bifrost Voucher DOT\", \"vDOT\", 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/OFTs/VoucherDotProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ProxyOFTV2.sol\";\n\ncontract VoucherDotProxyOFT is ProxyOFTV2 {\n    constructor(\n        address token,\n        address _lzEndpoint\n    ) ProxyOFTV2(token, 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/OFTs/VoucherMantaOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTV2.sol\";\n\ncontract VoucherMantaOFT is OFTV2 {\n    constructor(\n        address _lzEndpoint\n    ) OFTV2(\"Bifrost Voucher MANTA\", \"vMANTA\", 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/OFTs/VoucherMantaProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ProxyOFTV2.sol\";\n\ncontract VoucherMantaProxyOFT is ProxyOFTV2 {\n    constructor(\n        address token,\n        address _lzEndpoint\n    ) ProxyOFTV2(token, 6, _lzEndpoint) {}\n}\n"
    },
    "contracts/SoneiumSlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IRouterClient} from \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\";\nimport {OwnerIsCreator} from \"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\";\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"./interfaces/Types.sol\";\n\ncontract SoneiumSlpx is OwnerIsCreator {\n    address private constant vAstrOFT =\n        0x7746ef546d562b443AE4B4145541a3b1a3D75717;\n    uint16 private constant destChainId = 210;\n    bytes32 public remoteContract;\n\n    // Astar Shibuya Chain Selector\n    uint64 private constant astarChainSelector = 6955638871347136141;\n    address private constant AstrToken =\n        0xbd5F3751856E11f3e80dBdA567Ef91Eb7e874791;\n    address private constant SoneiumMinatoRouter =\n        0x0BF3dE8c5D3e8A2B34D2BEeB17ABfCeBaf363A59;\n    address public AstarReceiver;\n\n    mapping(Types.Operation => uint256) public minAmount;\n\n    event Mint(address indexed caller, uint256 indexed amount);\n    event Redeem(address indexed caller, uint256 indexed amount);\n\n    function setRemoteContract(address _remoteContract) public onlyOwner {\n        require(_remoteContract != address(0), \"Invalid remoteContract\");\n        AstarReceiver = _remoteContract;\n        remoteContract = bytes32(uint256(uint160(_remoteContract)));\n    }\n\n    function setMinAmount(\n        Types.Operation _operation,\n        uint256 _minAmount\n    ) public onlyOwner {\n        require(_minAmount != 0, \"Invalid minAmount\");\n        minAmount[_operation] = _minAmount;\n    }\n\n    function mint(uint256 _amount, uint256 gasLimit) external payable {\n        require(_amount >= minAmount[Types.Operation.Mint], \"amount too small\");\n        require(gasLimit != 0, \"amount too small\");\n        IERC20(AstrToken).transferFrom(msg.sender, address(this), _amount);\n\n        // set the token amounts\n        Client.EVMTokenAmount[]\n            memory tokenAmounts = new Client.EVMTokenAmount[](1);\n        Client.EVMTokenAmount memory tokenAmount = Client.EVMTokenAmount({\n            token: AstrToken,\n            amount: _amount\n        });\n        tokenAmounts[0] = tokenAmount;\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\n        bytes memory data = abi.encode(msg.sender, Types.Operation.Mint);\n        Client.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({\n            receiver: abi.encode(AstarReceiver), // ABI-encoded receiver address\n            data: data, // ABI-encoded string message\n            tokenAmounts: tokenAmounts, // Tokens amounts\n            extraArgs: Client._argsToBytes(\n                Client.EVMExtraArgsV1({gasLimit: gasLimit}) // Additional arguments, setting gas limit and non-strict sequency mode\n            ),\n            feeToken: address(0) // Setting feeToken to zero address, indicating native asset will be used for fees\n        });\n\n        // Initialize a router client instance to interact with cross-chain router\n        IRouterClient router = IRouterClient(SoneiumMinatoRouter);\n\n        // approve the Router to spend tokens on contract's behalf. I will spend the amount of the given token\n        IERC20(AstrToken).approve(address(router), _amount);\n\n        // Get the fee required to send the message\n        uint256 estimateFee = router.getFee(astarChainSelector, evm2AnyMessage);\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = msg.sender.call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n\n        // Send the message through the router and store the returned message ID\n        router.ccipSend{value: estimateFee}(astarChainSelector, evm2AnyMessage);\n\n        emit Mint(msg.sender, _amount);\n    }\n\n    function redeem(\n        uint256 _amount,\n        uint64 _dstGasForCall,\n        bytes calldata _adapterParams\n    ) external payable {\n        require(\n            _amount >= minAmount[Types.Operation.Redeem],\n            \"amount too small\"\n        );\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(msg.sender),\n            address(0),\n            _adapterParams\n        );\n\n        (uint256 estimateFee, bytes memory payload) = estimateSendAndCallFee(\n            msg.sender,\n            Types.Operation.Redeem,\n            _amount,\n            _dstGasForCall,\n            _adapterParams\n        );\n        require(msg.value >= estimateFee, \"too small fee\");\n        if (msg.value != estimateFee) {\n            uint256 refundAmount = msg.value - estimateFee;\n            (bool success, ) = msg.sender.call{value: refundAmount}(\"\");\n            require(success, \"failed to refund\");\n        }\n\n        IOFTV2(vAstrOFT).sendAndCall{value: estimateFee}(\n            msg.sender,\n            destChainId,\n            remoteContract,\n            _amount,\n            payload,\n            _dstGasForCall,\n            callParams\n        );\n\n        emit Redeem(msg.sender, _amount);\n    }\n\n    function estimateSendAndCallFee(\n        address caller,\n        Types.Operation operation,\n        uint256 _amount,\n        uint64 _dstGasForCall,\n        bytes calldata _adapterParams\n    ) public view returns (uint256, bytes memory) {\n        if (operation == Types.Operation.Redeem) {\n            bytes memory payload = abi.encode(caller, Types.Operation.Redeem);\n            (uint256 estimateFee, ) = IOFTV2(vAstrOFT).estimateSendAndCallFee(\n                destChainId,\n                remoteContract,\n                _amount,\n                payload,\n                _dstGasForCall,\n                false,\n                _adapterParams\n            );\n            return (estimateFee, payload);\n        } else {\n            revert(\"Invalid operation\");\n        }\n    }\n}\n"
    },
    "contracts/utils/AddressToAccount.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"./Blake2b.sol\";\n\nlibrary AddressToAccount {\n    using Blake2b for Blake2b.Instance;\n\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\n        Blake2b.Instance memory instance = Blake2b.init(hex\"\", 32);\n        return abi.decode(instance.finalize(src), (bytes32));\n    }\n\n    function AddressToSubstrateAccount(\n        address addr\n    ) public view returns (bytes32 account) {\n        bytes memory prefix = bytes(\"evm:\");\n        bytes memory addrBytes = abi.encodePacked(addr);\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\n        return blake2bHash(data);\n    }\n}\n"
    },
    "contracts/utils/Blake2b.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nlibrary Blake2b {\n    struct Instance {\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\n        // but every field needed for the \"blake2 f function precompile\".\n        //\n        // This is a tightly packed buffer of:\n        // - rounds: 32-bit BE\n        // - h: 8 x 64-bit LE\n        // - m: 16 x 64-bit LE\n        // - t: 2 x 64-bit LE\n        // - f: 8-bit\n        bytes state;\n        // Expected output hash length. (Used in `finalize`.)\n        uint out_len;\n        // Data passed to \"function F\".\n        // NOTE: this is limited to 24 bits.\n        uint input_counter;\n    }\n\n    // Initialise the state with a given `key` and required `out_len` hash length.\n    function init(\n        bytes memory key,\n        uint out_len\n    ) internal view returns (Instance memory instance) {\n        require(key.length == 0, \"Invalid key\");\n        require(out_len == 32, \"Invalid out_len\");\n        reset(instance, key, out_len);\n    }\n\n    // Initialise the state with a given `key` and required `out_len` hash length.\n    function reset(\n        Instance memory instance,\n        bytes memory key,\n        uint out_len\n    ) internal view {\n        instance.out_len = out_len;\n        instance.input_counter = 0;\n\n        // This is entire state transmitted to the precompile.\n        // It is byteswapped for the encoding requirements, additionally\n        // the IV has the initial parameter block 0 XOR constant applied, but\n        // not the key and output length.\n        instance\n            .state = hex\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n        bytes memory state = instance.state;\n\n        // Update parameter block 0 with key length and output length.\n        uint key_len = key.length;\n        assembly {\n            let ptr := add(state, 36)\n            let tmp := mload(ptr)\n            let p0 := or(shl(240, key_len), shl(248, out_len))\n            tmp := xor(tmp, p0)\n            mstore(ptr, tmp)\n        }\n\n        // TODO: support salt and personalization\n\n        if (key_len > 0) {\n            require(key_len == 64);\n            // FIXME: the key must be zero padded\n            assert(key.length == 128);\n            update(instance, key, key_len);\n        }\n    }\n\n    // This calls the blake2 precompile (\"function F of the spec\").\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\n    // but the supplied block data will not be cleared.\n    function call_function_f(Instance memory instance) private view {\n        bytes memory state = instance.state;\n        assembly {\n            let state_ptr := add(state, 32)\n            if iszero(\n                staticcall(\n                    not(0),\n                    0x09,\n                    state_ptr,\n                    0xd5,\n                    add(state_ptr, 4),\n                    0x40\n                )\n            ) {\n                revert(0, 0)\n            }\n        }\n    }\n\n    // This function will split blocks correctly and repeatedly call the precompile.\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\n    //       hence the real length is indicated with `data_len`\n    function update_loop(\n        Instance memory instance,\n        bytes memory data,\n        uint data_len,\n        bool last_block\n    ) private view {\n        bytes memory state = instance.state;\n        uint input_counter = instance.input_counter;\n\n        // This is the memory location where the \"data block\" starts for the precompile.\n        uint state_ptr;\n        assembly {\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\n            // Also adjust for the size of the bytes type.\n            state_ptr := add(state, 100)\n        }\n\n        // This is the memory location where the input data resides.\n        uint data_ptr;\n        assembly {\n            data_ptr := add(data, 32)\n        }\n\n        uint len = data.length;\n        while (len > 0) {\n            if (len >= 128) {\n                assembly {\n                    mstore(state_ptr, mload(data_ptr))\n                    data_ptr := add(data_ptr, 32)\n\n                    mstore(add(state_ptr, 32), mload(data_ptr))\n                    data_ptr := add(data_ptr, 32)\n\n                    mstore(add(state_ptr, 64), mload(data_ptr))\n                    data_ptr := add(data_ptr, 32)\n\n                    mstore(add(state_ptr, 96), mload(data_ptr))\n                    data_ptr := add(data_ptr, 32)\n                }\n\n                len -= 128;\n                // FIXME: remove this once implemented proper padding\n                if (data_len < 128) {\n                    input_counter += data_len;\n                } else {\n                    data_len -= 128;\n                    input_counter += 128;\n                }\n            } else {\n                // FIXME: implement support for smaller than 128 byte blocks\n                revert();\n            }\n\n            // Set length field (little-endian) for maximum of 24-bits.\n            assembly {\n                mstore8(add(state, 228), and(input_counter, 0xff))\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\n            }\n\n            // Set the last block indicator.\n            // Only if we've processed all input.\n            if (len == 0) {\n                assembly {\n                    // Writing byte 212 here.\n                    mstore8(add(state, 244), last_block)\n                }\n            }\n\n            // Call the precompile\n            call_function_f(instance);\n        }\n\n        instance.input_counter = input_counter;\n    }\n\n    // Update the state with a non-final block.\n    // NOTE: the input must be complete blocks.\n    function update(\n        Instance memory instance,\n        bytes memory data,\n        uint data_len\n    ) internal view {\n        require((data.length % 128) == 0);\n        update_loop(instance, data, data_len, false);\n    }\n\n    // Update the state with a final block and return the hash.\n    function finalize(\n        Instance memory instance,\n        bytes memory data\n    ) internal view returns (bytes memory output) {\n        // FIXME: support incomplete blocks (zero pad them)\n        uint input_length = data.length;\n        if (input_length == 0 || (input_length % 128) != 0) {\n            data = abi.encodePacked(\n                data,\n                new bytes(128 - (input_length % 128))\n            );\n        }\n        assert((data.length % 128) == 0);\n        update_loop(instance, data, input_length, true);\n\n        // FIXME: support other lengths\n        // assert(instance.out_len == 64);\n\n        bytes memory state = instance.state;\n        output = new bytes(instance.out_len);\n        if (instance.out_len == 16) {\n            assembly {\n                mstore(add(output, 16), mload(add(state, 20)))\n                mstore(output, 16)\n            }\n        } else if (instance.out_len == 32) {\n            assembly {\n                mstore(add(output, 32), mload(add(state, 36)))\n            }\n        } else {\n            assembly {\n                mstore(add(output, 32), mload(add(state, 36)))\n                mstore(add(output, 64), mload(add(state, 68)))\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/BuildCallData.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nlibrary BuildCallData {\n    uint8 public constant PALLET_INDEX = 125;\n    uint8 public constant MINT_CALL_INDEX = 0;\n    uint8 public constant SWAP_CALL_INDEX = 1;\n    uint8 public constant REDEEM_CALL_INDEX = 2;\n    uint8 public constant STABLE_POOL_SWAP_CALL_INDEX = 3;\n    uint8 public constant MINT_WITH_CHANNEL_ID_CALL_INDEX = 13;\n    uint8 public constant CREATE_ORDER_CALL_INDEX = 14;\n\n    function buildMintCallBytes(\n        address caller,\n        bytes2 token,\n        bytes memory targetChain,\n        string memory remark\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(MINT_CALL_INDEX);\n\n        // astar target_chain = bytes1(0)\n        return\n            bytes.concat(\n                prefix,\n                abi.encodePacked(caller),\n                token,\n                targetChain,\n                toScaleString(remark)\n            );\n    }\n\n    function buildMintWithChannelIdCallBytes(\n        address caller,\n        bytes2 token,\n        bytes memory targetChain,\n        string memory remark,\n        uint32 channel_id\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(MINT_WITH_CHANNEL_ID_CALL_INDEX);\n\n        // astar target_chain = bytes1(0)\n        return\n            bytes.concat(\n                prefix,\n                abi.encodePacked(caller),\n                token,\n                targetChain,\n                toScaleString(remark),\n                encode_uint32(channel_id)\n            );\n    }\n\n    function buildCreateOrderCallBytes(\n        address caller,\n        uint256 chain_id,\n        uint256 block_number,\n        bytes2 token,\n        uint128 amount,\n        bytes memory targetChain,\n        string memory remark,\n        uint32 channel_id\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(CREATE_ORDER_CALL_INDEX);\n\n        return\n            bytes.concat(\n                prefix,\n                abi.encodePacked(caller),\n                encode_uint64(uint64(chain_id)),\n                encode_uint128(uint128(block_number)),\n                token,\n                encode_uint128(amount),\n                targetChain,\n                toScaleString(remark),\n                encode_uint32(channel_id)\n            );\n    }\n\n    function buildSwapCallBytes(\n        address caller,\n        bytes2 currency_in,\n        bytes2 currency_out,\n        uint128 currency_out_min,\n        bytes memory targetChain\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(SWAP_CALL_INDEX);\n\n        // astar target_chain = bytes1(0)\n        return\n            bytes.concat(\n                prefix,\n                abi.encodePacked(caller),\n                currency_in,\n                currency_out,\n                encode_uint128(currency_out_min),\n                targetChain\n            );\n    }\n\n    function buildStablePoolSwapCallBytes(\n        address caller,\n        uint32 pool_id,\n        bytes2 currency_in,\n        bytes2 currency_out,\n        uint128 min_dy,\n        bytes memory targetChain\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(STABLE_POOL_SWAP_CALL_INDEX);\n\n        // astar target_chain = bytes1(0)\n        return\n            bytes.concat(\n                prefix,\n                abi.encodePacked(caller),\n                encode_uint32(pool_id),\n                currency_in,\n                currency_out,\n                encode_uint128(min_dy),\n                targetChain\n            );\n    }\n\n    function buildRedeemCallBytes(\n        address caller,\n        bytes2 vtoken,\n        bytes memory targetChain\n    ) public pure returns (bytes memory) {\n        bytes memory prefix = new bytes(2);\n        // storage pallet index\n        prefix[0] = bytes1(PALLET_INDEX);\n        // storage call index\n        prefix[1] = bytes1(REDEEM_CALL_INDEX);\n\n        // astar target_chain = bytes1(0)\n        return\n            bytes.concat(prefix, abi.encodePacked(caller), vtoken, targetChain);\n    }\n\n    //https://docs.substrate.io/reference/scale-codec/\n    function encode_uint128(uint128 x) internal pure returns (bytes memory) {\n        bytes memory b = new bytes(16);\n        for (uint i = 0; i < 16; i++) {\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\n        }\n        return b;\n    }\n\n    //https://docs.substrate.io/reference/scale-codec/\n    function encode_uint64(uint64 x) internal pure returns (bytes memory) {\n        bytes memory b = new bytes(8);\n        for (uint i = 0; i < 8; i++) {\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\n        }\n        return b;\n    }\n\n    //https://docs.substrate.io/reference/scale-codec/\n    function encode_uint32(uint32 x) internal pure returns (bytes memory) {\n        bytes memory b = new bytes(4);\n        for (uint i = 0; i < 4; i++) {\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\n        }\n        return b;\n    }\n\n    //https://docs.substrate.io/reference/scale-codec/\n    function toTruncBytes(uint64 x) internal pure returns (bytes memory) {\n        bytes memory b = new bytes(8);\n        uint len = 0;\n        for (uint i = 0; i < 8; i++) {\n            uint8 temp = uint8(x / (2 ** (8 * i)));\n            if (temp != 0) {\n                b[i] = bytes1(temp);\n            } else {\n                len = i;\n                break;\n            }\n        }\n        bytes memory rst = new bytes(len);\n        for (uint i = 0; i < len; i++) {\n            rst[i] = b[i];\n        }\n        return rst;\n    }\n\n    // Convert an hexadecimal character to their value\n    function fromScaleChar(uint8 c) internal pure returns (uint8) {\n        if (bytes1(c) >= bytes1(\"0\") && bytes1(c) <= bytes1(\"9\")) {\n            return 48 + c - uint8(bytes1(\"0\"));\n        }\n        if (bytes1(c) >= bytes1(\"a\") && bytes1(c) <= bytes1(\"z\")) {\n            return 97 + c - uint8(bytes1(\"a\"));\n        }\n        if (bytes1(c) >= bytes1(\"A\") && bytes1(c) <= bytes1(\"Z\")) {\n            return 65 + c - uint8(bytes1(\"A\"));\n        }\n        revert(\"fail\");\n    }\n\n    // encode the string to bytes\n    // following the scale format\n    // format: len + content\n    // a-z: 61->87\n    // A-Z: 41->57\n    // 0-9: 30->40\n    function toScaleString(\n        string memory s\n    ) internal pure returns (bytes memory) {\n        bytes memory ss = bytes(s);\n        bytes memory len = toTruncBytes(uint64(ss.length * 4));\n        bytes memory content = new bytes(ss.length);\n        for (uint i = 0; i < ss.length; ++i) {\n            content[i] = bytes1(fromScaleChar(uint8(ss[i])));\n        }\n        bytes memory rst = bytes.concat(len, content);\n        return rst;\n    }\n}\n"
    },
    "contracts/XcmOracle.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./MoonbeamSlpx.sol\";\n\ncontract XcmOracle is OwnableUpgradeable, PausableUpgradeable {\n    struct PoolInfo {\n        uint256 assetAmount;\n        uint256 vAssetAmount;\n    }\n    struct RateInfo {\n        uint8 mintRate;\n        uint8 redeemRate;\n    }\n    RateInfo public rateInfo;\n    address public slxAddress;\n    address public sovereignAddress;\n    mapping(bytes2 => PoolInfo) public tokenPool;\n\n    function initialize(\n        address _SlxAddress,\n        address _SovereignAddress\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        slxAddress = _SlxAddress;\n        sovereignAddress = _SovereignAddress;\n    }\n\n    /// Bifrost will set a fee and the data will be consistent with Bifrost Chain.\n    function setRate(uint8 _mintRate, uint8 _redeemRate) public onlyOwner {\n        rateInfo.mintRate = _mintRate;\n        rateInfo.redeemRate = _redeemRate;\n    }\n\n    /// Setting up data with XCM.\n    /// Multi-signature is used to monitor XCM after an error to set up data.\n    function setTokenAmount(\n        bytes2 _currencyId,\n        uint256 _assetAmount,\n        uint256 _vAssetAmount\n    ) public {\n        require(\n            _msgSender() == sovereignAddress || _msgSender() == owner(),\n            \"No permission\"\n        );\n        PoolInfo storage poolInfo = tokenPool[_currencyId];\n        poolInfo.assetAmount = _assetAmount;\n        poolInfo.vAssetAmount = _vAssetAmount;\n    }\n\n    function getVTokenByToken(\n        address _assetAddress,\n        uint256 _assetAmount\n    ) public view whenNotPaused returns (uint256) {\n        bytes2 currencyId = getCurrencyIdByAssetAddress(_assetAddress);\n        PoolInfo memory poolInfo = tokenPool[currencyId];\n        require(\n            poolInfo.vAssetAmount != 0 && poolInfo.assetAmount != 0,\n            \"Not ready\"\n        );\n        uint256 mintFee = (rateInfo.mintRate * _assetAmount) / 10000;\n        uint256 assetAmountExcludingFee = _assetAmount - mintFee;\n        uint256 vAssetAmount = (assetAmountExcludingFee *\n            poolInfo.vAssetAmount) / poolInfo.assetAmount;\n        return vAssetAmount;\n    }\n\n    function getTokenByVToken(\n        address _assetAddress,\n        uint256 _vAssetAmount\n    ) public view whenNotPaused returns (uint256) {\n        bytes2 currencyId = getCurrencyIdByAssetAddress(_assetAddress);\n        PoolInfo memory poolInfo = tokenPool[currencyId];\n        require(\n            poolInfo.vAssetAmount != 0 && poolInfo.assetAmount != 0,\n            \"Not ready\"\n        );\n        uint256 redeemFee = (rateInfo.redeemRate * _vAssetAmount) / 10000;\n        uint256 vAssetAmountExcludingFee = _vAssetAmount - redeemFee;\n        uint256 assetAmount = (vAssetAmountExcludingFee *\n            poolInfo.assetAmount) / poolInfo.vAssetAmount;\n        return assetAmount;\n    }\n\n    function getCurrencyIdByAssetAddress(\n        address _assetAddress\n    ) public view returns (bytes2) {\n        (bytes2 currencyId, uint256 _d) = MoonbeamSlpx(slxAddress)\n            .addressToAssetInfo(_assetAddress);\n        require(currencyId != 0x0000, \"Not found\");\n        return currencyId;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}