{
  "address": "0x825cddFb8F28f1C09577A20f649E2736886380C4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_soneiumSlpx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "InvalidRouter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Receive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "derivativeAddress",
          "type": "address"
        }
      ],
      "name": "SetDerivativeAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "scriptTrigger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vastrFee",
          "type": "uint256"
        }
      ],
      "name": "SetLayerZeroFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "scriptTrigger",
          "type": "address"
        }
      ],
      "name": "SetScriptTrigger",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BNC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VASTR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "astarSlpx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "callerToDerivativeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ccipReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "claimAstr",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "claimVAstr",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isDerivativeAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_from",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polkadotXcm",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scriptTrigger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLayerZeroFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_scriptTrigger",
          "type": "address"
        }
      ],
      "name": "setScriptTrigger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soneiumSlpx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vAstrProxyOFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vastrLayerZeroFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1c86b35fed2fddaa054507d040b8b0d6f86e34d35c96fede0f0156bd09734251",
  "receipt": {
    "to": null,
    "from": "0x4597C97a43dFBb4a398E2b16AA9cE61f90d801DD",
    "contractAddress": "0x825cddFb8F28f1C09577A20f649E2736886380C4",
    "transactionIndex": 0,
    "gasUsed": "2738030",
    "logsBloom": "0x
    "blockHash": "0xb763e4b0a505378487b40e3f6d63f49f3c8306208ea22c78fec9e47dc53f252b",
    "transactionHash": "0x1c86b35fed2fddaa054507d040b8b0d6f86e34d35c96fede0f0156bd09734251",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7889669,
        "transactionHash": "0x1c86b35fed2fddaa054507d040b8b0d6f86e34d35c96fede0f0156bd09734251",
        "address": "0x825cddFb8F28f1C09577A20f649E2736886380C4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004597c97a43dfbb4a398e2b16aa9ce61f90d801dd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb763e4b0a505378487b40e3f6d63f49f3c8306208ea22c78fec9e47dc53f252b"
      }
    ],
    "blockNumber": 7889669,
    "cumulativeGasUsed": "2738030",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9D40Ca58eF5392a8fB161AB27c7f61de5dfBF0E2",
    "0x8D5c5CB8ec58285B424C93436189fB865e437feF"
  ],
  "numDeployments": 1,
  "solcInputHash": "c9dacfc9b64ed266a94c921b9fcde4e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_soneiumSlpx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivativeAddress\",\"type\":\"address\"}],\"name\":\"SetDerivativeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scriptTrigger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vastrFee\",\"type\":\"uint256\"}],\"name\":\"SetLayerZeroFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scriptTrigger\",\"type\":\"address\"}],\"name\":\"SetScriptTrigger\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VASTR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astarSlpx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callerToDerivativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"claimAstr\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"claimVAstr\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDerivativeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polkadotXcm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scriptTrigger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLayerZeroFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scriptTrigger\",\"type\":\"address\"}],\"name\":\"setScriptTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soneiumSlpx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vAstrProxyOFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vastrLayerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"CCIP router address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstarReceiver.sol\":\"AstarReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_ccipRouter)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x23827b8b1cd9f1d7886720ab0347d34891c4a584dc9ee048b85a41dc2241917f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AstarReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"./interfaces/IOFTReceiverV2.sol\\\";\\nimport \\\"./interfaces/IOFTV2.sol\\\";\\nimport \\\"./interfaces/IOFTWithFee.sol\\\";\\nimport \\\"./interfaces/XCM.sol\\\";\\nimport \\\"./interfaces/XCM_v2.sol\\\";\\nimport \\\"./interfaces/Types.sol\\\";\\nimport \\\"./interfaces/IWASTR.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\nimport \\\"./AstarSlpx.sol\\\";\\nimport \\\"./DerivativeContract.sol\\\";\\n\\ncontract AstarReceiver is CCIPReceiver, Ownable, IOFTReceiverV2 {\\n    bytes1 private constant ASTAR_CHAIN_TYPE = 0x00;\\n    bytes2 private constant ASTR_CURRENCY_ID = 0x0803;\\n    bytes2 private constant VASTR_CURRENCY_ID = 0x0903;\\n    uint256 private constant BIFROST_PARA_ID = 2030;\\n    bool private constant IS_RELAY_CHAIN = false;\\n    uint16 public constant destChainId = 340;\\n    address public constant BNC = 0xfFffFffF00000000000000010000000000000007;\\n    address public constant VASTR = 0xfffFffff00000000000000010000000000000010;\\n    address public constant astarSlpx =\\n        0xc6bf0C5C78686f1D0E2E54b97D6de6e2cEFAe9fD;\\n    address public constant polkadotXcm =\\n        0x0000000000000000000000000000000000005004;\\n    address public constant vAstrProxyOFT =\\n        0xba273b7Fa296614019c71Dcc54DCa6C922A93BcF;\\n\\n    uint64 private constant soneiumChainSelector = 12505351618335765396;\\n    address private constant WASTR =\\n        0x37795FdD8C165CaB4D6c05771D564d80439CD093;\\n    address private constant astarRouter =\\n        0x8D5c5CB8ec58285B424C93436189fB865e437feF;\\n    address public soneiumSlpx;\\n\\n    uint256 public vastrLayerZeroFee;\\n    address public scriptTrigger;\\n    mapping(address => address) public callerToDerivativeAddress;\\n    mapping(address => bool) public isDerivativeAddress;\\n\\n    event SetDerivativeAddress(\\n        address indexed caller,\\n        address indexed derivativeAddress\\n    );\\n    event Receive(address indexed sender, uint256 indexed amount);\\n    event SetLayerZeroFee(\\n        address indexed scriptTrigger,\\n        uint256 indexed vastrFee\\n    );\\n    event SetScriptTrigger(address indexed scriptTrigger);\\n\\n    constructor(address _soneiumSlpx, address router) CCIPReceiver(router) {\\n        require(_soneiumSlpx != address(0), \\\"Invalid soneiumSlpx\\\");\\n        soneiumSlpx = _soneiumSlpx;\\n    }\\n\\n    function create_order(\\n        address caller,\\n        address assetAddress,\\n        bytes2 token,\\n        uint128 amount,\\n        address receiver,\\n        uint32 channel_id\\n    ) internal {\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        if (assetAddress == address(0)) {\\n            xcmTransferNativeAsset(caller, uint256(amount));\\n        } else {\\n            xcmTransferAsset(assetAddress, caller, uint256(amount));\\n        }\\n\\n        // Build bifrost slpx create order call data\\n        bytes memory callData = BuildCallData.buildCreateOrderCallBytes(\\n            caller,\\n            block.chainid,\\n            block.number,\\n            token,\\n            amount,\\n            abi.encodePacked(ASTAR_CHAIN_TYPE, receiver),\\n            \\\"Soneium\\\",\\n            channel_id\\n        );\\n        // XCM Transact\\n        (uint64 transactWeight, uint256 feeAmount) = AstarSlpx(astarSlpx)\\n            .operationToFeeInfo(AstarSlpx.Operation.Mint);\\n        require(\\n            XCM(polkadotXcm).remote_transact(\\n                BIFROST_PARA_ID,\\n                IS_RELAY_CHAIN,\\n                BNC,\\n                feeAmount,\\n                callData,\\n                transactWeight\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata,\\n        uint64,\\n        bytes32 _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external override {\\n        require(_srcChainId == destChainId, \\\"only receive msg from astar-zk\\\");\\n        require(_msgSender() == vAstrProxyOFT, \\\"only native oft can call\\\");\\n        require(\\n            address(uint160(uint(_from))) == soneiumSlpx,\\n            \\\"only receive msg from soneiumSlpx\\\"\\n        );\\n        processOFTReceive(_amount, _payload);\\n    }\\n\\n    /// handle a received message\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory any2EvmMessage\\n    ) internal override {\\n        Client.EVMTokenAmount[] memory tokenAmounts = any2EvmMessage\\n            .destTokenAmounts;\\n        address token = tokenAmounts[0].token; // we expect one token to be transfered at once but of course, you can transfer several tokens.\\n        uint256 amount = tokenAmounts[0].amount; // we expect one token to be transfered at once but of course, you can transfer several tokens.\\n        processCCIPReceive(token, amount, any2EvmMessage.data);\\n    }\\n\\n    function processCCIPReceive(address token, uint256 amount, bytes memory data) internal {\\n        require(token == WASTR, \\\"only receive WASTR\\\");\\n        IWASTR(payable(WASTR)).withdraw(amount);\\n\\n        (address caller, Types.Operation operation, address receiver, uint32 channelId) = abi.decode(\\n            data,\\n            (address, Types.Operation, address, uint32)\\n        );\\n        if (callerToDerivativeAddress[receiver] == address(0)) {\\n            setDerivativeAddress(receiver);\\n        }\\n        require(operation == Types.Operation.Mint, \\\"only mint operation is allowed\\\");\\n        create_order(\\n            caller,\\n            address(0),\\n            ASTR_CURRENCY_ID,\\n            uint128(amount),\\n            callerToDerivativeAddress[receiver],\\n            channelId\\n        );\\n    }\\n\\n    function processOFTReceive(uint256 amount, bytes memory data) internal  {\\n        (address caller, Types.Operation operation) = abi.decode(\\n            data,\\n            (address, Types.Operation)\\n        );\\n        if (callerToDerivativeAddress[caller] == address(0)) {\\n            setDerivativeAddress(caller);\\n        }\\n        require(operation == Types.Operation.Redeem, \\\"only redeem operation is allowed\\\");\\n        bool success = IERC20(VASTR).transfer(\\n            scriptTrigger,\\n            vastrLayerZeroFee\\n        );\\n        require(success, \\\"failed to charge\\\");\\n        create_order(\\n            caller,\\n            VASTR,\\n            VASTR_CURRENCY_ID,\\n            uint128(amount - vastrLayerZeroFee),\\n            callerToDerivativeAddress[caller],\\n            0\\n        );\\n    }\\n\\n    function claimVAstr(\\n        address addr,\\n        bytes calldata _adapterParams\\n    ) external payable {\\n        require(_msgSender() == scriptTrigger, \\\"must be scriptTrigger\\\");\\n        address derivativeAddress = callerToDerivativeAddress[addr];\\n        require(derivativeAddress != address(0), \\\"invalid address\\\");\\n        uint256 amount = DerivativeContract(derivativeAddress)\\n            .withdrawErc20Token(VASTR);\\n        IERC20(VASTR).approve(vAstrProxyOFT, amount);\\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\\n            payable(_msgSender()),\\n            address(0),\\n            _adapterParams\\n        );\\n        bytes32 toAddress = bytes32(uint256(uint160(addr)));\\n        (uint256 estimateFee, ) = IOFTV2(vAstrProxyOFT).estimateSendFee(\\n            destChainId,\\n            toAddress,\\n            amount,\\n            false,\\n            _adapterParams\\n        );\\n        require(msg.value >= estimateFee, \\\"too small fee\\\");\\n        if (msg.value != estimateFee) {\\n            uint256 refundAmount = msg.value - estimateFee;\\n            (bool success, ) = _msgSender().call{value: refundAmount}(\\\"\\\");\\n            require(success, \\\"failed to refund\\\");\\n        }\\n        IOFTV2(vAstrProxyOFT).sendFrom{value: estimateFee}(\\n            address(this),\\n            destChainId,\\n            toAddress,\\n            amount,\\n            callParams\\n        );\\n    }\\n\\n    function claimAstr(address addr, uint256 gasLimit) external payable {\\n        require(_msgSender() == scriptTrigger, \\\"must be scriptTrigger\\\");\\n        uint256 _amount = DerivativeContract(callerToDerivativeAddress[addr]).withdrawNativeToken();\\n\\n        IWASTR(payable(WASTR)).deposit{value: _amount}();\\n        IWASTR(payable(WASTR)).approve(astarRouter, _amount);\\n        Client.EVMTokenAmount[]\\n        memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        Client.EVMTokenAmount memory tokenAmount = Client.EVMTokenAmount({\\n            token: WASTR,\\n            amount: _amount\\n        });\\n        tokenAmounts[0] = tokenAmount;\\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\\n            receiver: abi.encode(addr),\\n            data: abi.encode(\\\"\\\"),\\n            tokenAmounts: tokenAmounts,\\n            extraArgs: Client._argsToBytes(\\n                Client.EVMExtraArgsV1({\\n                    gasLimit: gasLimit // Gas limit for the callback on the destination chain\\n                })),\\n            feeToken: WASTR\\n        });\\n\\n        uint256 estimateFee = IRouterClient(this.getRouter()).getFee(\\n            soneiumChainSelector,\\n            message\\n        );\\n\\n        require(_amount > estimateFee, \\\"too small fee\\\");\\n        message.tokenAmounts[0].amount = _amount - estimateFee;\\n        IRouterClient(this.getRouter()).ccipSend(\\n            soneiumChainSelector,\\n            message\\n        );\\n    }\\n\\n    function setDerivativeAddress(address addr) internal {\\n        require(\\n            callerToDerivativeAddress[addr] == address(0),\\n            \\\"already set derivativeAddress\\\"\\n        );\\n        bytes memory bytecode = type(DerivativeContract).creationCode;\\n        bytes32 salt = bytes32(uint256(uint160(addr)));\\n        address derivativeAddress = Create2.deploy(0, salt, bytecode);\\n        callerToDerivativeAddress[addr] = derivativeAddress;\\n        isDerivativeAddress[derivativeAddress] = true;\\n        emit SetDerivativeAddress(addr, derivativeAddress);\\n    }\\n\\n    function setLayerZeroFee() external {\\n        require(_msgSender() == scriptTrigger, \\\"must be scriptTrigger\\\");\\n        bytes32 toAddress = bytes32(uint256(uint160(scriptTrigger)));\\n        uint256 amount = 1000 ether;\\n        bytes memory adapterParams = abi.encodePacked(\\n            uint16(1),\\n            uint256(100000)\\n        );\\n\\n        (uint256 vastrFee, ) = IOFTV2(vAstrProxyOFT).estimateSendFee(\\n            destChainId,\\n            toAddress,\\n            amount,\\n            false,\\n            adapterParams\\n        );\\n\\n        vastrLayerZeroFee = vastrFee;\\n\\n        emit SetLayerZeroFee(\\n            scriptTrigger,\\n            vastrLayerZeroFee\\n        );\\n    }\\n\\n    function setScriptTrigger(address _scriptTrigger) external onlyOwner {\\n        require(_scriptTrigger != address(0), \\\"invalid address\\\");\\n        scriptTrigger = _scriptTrigger;\\n        emit SetScriptTrigger(_scriptTrigger);\\n    }\\n\\n    function xcmTransferNativeAsset(address to, uint256 amount) internal {\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(to);\\n        address[] memory assetId = new address[](1);\\n        uint256[] memory assetAmount = new uint256[](1);\\n        assetId[0] = address(0);\\n        assetAmount[0] = amount;\\n        require(\\n            XCM(polkadotXcm).assets_reserve_transfer(\\n                assetId,\\n                assetAmount,\\n                publicKey,\\n                IS_RELAY_CHAIN,\\n                BIFROST_PARA_ID,\\n                0\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n    function xcmTransferAsset(\\n        address assetAddress,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(to);\\n\\n        address[] memory assetId = new address[](1);\\n        uint256[] memory assetAmount = new uint256[](1);\\n        assetId[0] = assetAddress;\\n        assetAmount[0] = amount;\\n        require(\\n            XCM(polkadotXcm).assets_withdraw(\\n                assetId,\\n                assetAmount,\\n                publicKey,\\n                IS_RELAY_CHAIN,\\n                BIFROST_PARA_ID,\\n                0\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x9a8227c4193cfd313acdec9682c150e263a8260b2c962f1eb3de8faa98aef02b\",\"license\":\"Apache-2.0\"},\"contracts/AstarSlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/XCM.sol\\\";\\nimport \\\"./interfaces/XCM_v2.sol\\\";\\nimport \\\"./interfaces/ISlpx.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\n\\ncontract AstarSlpx is ISlpx, OwnableUpgradeable, PausableUpgradeable {\\n    address private constant NATIVE_ASSET_ADDRESS =\\n        0x0000000000000000000000000000000000000000;\\n    address private constant BNC_ADDRESS =\\n        0xfFffFffF00000000000000010000000000000007;\\n    address private constant XCM_ADDRESS =\\n        0x0000000000000000000000000000000000005004;\\n    bytes1 private constant ASTAR_CHAIN = 0x00;\\n    uint32 private constant BIFROST_PARA_ID = 2030;\\n\\n    enum Operation {\\n        Mint,\\n        Redeem,\\n        ZenlinkSwap,\\n        StableSwap\\n    }\\n\\n    struct AssetInfo {\\n        bytes2 currencyId;\\n        uint256 operationalMin;\\n    }\\n\\n    struct FeeInfo {\\n        uint64 transactRequiredWeightAtMost;\\n        uint256 feeAmount;\\n    }\\n\\n    mapping(address => AssetInfo) public addressToAssetInfo;\\n    mapping(Operation => FeeInfo) public operationToFeeInfo;\\n    struct DestChainInfo {\\n        bool is_evm;\\n        bool is_substrate;\\n        bytes1 raw_chain_index;\\n    }\\n    mapping(uint64 => DestChainInfo) public destChainInfo;\\n\\n    function checkAssetIsExist(\\n        address assetAddress\\n    ) internal view returns (bytes2) {\\n        AssetInfo memory assetInfo = addressToAssetInfo[assetAddress];\\n        require(assetInfo.operationalMin > 0, \\\"Asset is not exist\\\");\\n        require(assetInfo.currencyId != bytes2(0), \\\"Invalid asset\\\");\\n        return assetInfo.currencyId;\\n    }\\n\\n    function checkFeeInfo(\\n        Operation operation\\n    ) internal view returns (FeeInfo memory) {\\n        FeeInfo memory feeInfo = operationToFeeInfo[operation];\\n        require(\\n            feeInfo.transactRequiredWeightAtMost > 0,\\n            \\\"Invalid transactRequiredWeightAtMost\\\"\\n        );\\n        require(feeInfo.feeAmount > 0, \\\"Invalid feeAmount\\\");\\n        return feeInfo;\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        setAssetAddressInfo(NATIVE_ASSET_ADDRESS, 0x0803, 1000000000000000000);\\n    }\\n\\n    function setOperationToFeeInfo(\\n        Operation _operation,\\n        uint64 _transactRequiredWeightAtMost,\\n        uint256 _feeAmount\\n    ) public onlyOwner {\\n        require(\\n            _transactRequiredWeightAtMost <= 10000000000,\\n            \\\"transactRequiredWeightAtMost too large\\\"\\n        );\\n        require(_feeAmount <= 1000000000000, \\\"feeAmount too large\\\");\\n        operationToFeeInfo[_operation] = FeeInfo(\\n            _transactRequiredWeightAtMost,\\n            _feeAmount\\n        );\\n    }\\n\\n    function setAssetAddressInfo(\\n        address assetAddress,\\n        bytes2 currencyId,\\n        uint256 minimumValue\\n    ) public onlyOwner {\\n        require(minimumValue != 0, \\\"Invalid minimumValue\\\");\\n        require(currencyId != bytes2(0), \\\"Invalid currencyId\\\");\\n        AssetInfo storage assetInfo = addressToAssetInfo[assetAddress];\\n        assetInfo.currencyId = currencyId;\\n        assetInfo.operationalMin = minimumValue;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function xcmTransferNativeAsset(uint256 amount) internal {\\n        require(\\n            amount >= addressToAssetInfo[NATIVE_ASSET_ADDRESS].operationalMin,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n        address[] memory assetId = new address[](1);\\n        uint256[] memory assetAmount = new uint256[](1);\\n        assetId[0] = NATIVE_ASSET_ADDRESS;\\n        assetAmount[0] = amount;\\n        require(\\n            XCM(XCM_ADDRESS).assets_reserve_transfer(\\n                assetId,\\n                assetAmount,\\n                publicKey,\\n                false,\\n                BIFROST_PARA_ID,\\n                0\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(\\n            amount >= addressToAssetInfo[assetAddress].operationalMin,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n\\n        XCM_v2.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        IERC20 asset = IERC20(assetAddress);\\n        asset.transferFrom(_msgSender(), address(this), amount);\\n        require(\\n            XCM_v2(XCM_ADDRESS).transfer(\\n                assetAddress,\\n                amount,\\n                dest_account,\\n                XCM_v2.WeightV2(0, 0)\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n    function mintVNativeAsset(\\n        address receiver,\\n        string memory remark\\n    ) external payable override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n\\n        xcmTransferNativeAsset(msg.value);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            nativeToken,\\n            targetChain,\\n            remark\\n        );\\n\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            msg.value,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark\\n    ) external override {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n\\n        bytes2 token = checkAssetIsExist(assetAddress);\\n\\n        // xtokens call\\n        xcmTransferAsset(assetAddress, amount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            token,\\n            targetChain,\\n            remark\\n        );\\n\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            assetAddress,\\n            amount,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function mintVNativeAssetWithChannelId(\\n        address receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external payable override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n\\n        xcmTransferNativeAsset(msg.value);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintWithChannelIdCallBytes(\\n            _msgSender(),\\n            nativeToken,\\n            targetChain,\\n            remark,\\n            channel_id\\n        );\\n\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            msg.value,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function mintVAssetWithChannelId(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external override {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n\\n        bytes2 token = checkAssetIsExist(assetAddress);\\n\\n        // xtokens call\\n        xcmTransferAsset(assetAddress, amount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintWithChannelIdCallBytes(\\n            _msgSender(),\\n            token,\\n            targetChain,\\n            remark,\\n            channel_id\\n        );\\n\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            assetAddress,\\n            amount,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 vtoken = checkAssetIsExist(vAssetAddress);\\n\\n        xcmTransferAsset(vAssetAddress, amount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(\\n            _msgSender(),\\n            vtoken,\\n            targetChain\\n        );\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Redeem);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Redeem(_msgSender(), vAssetAddress, amount, receiver, callData);\\n    }\\n\\n    function setDestChainInfo(\\n        uint64 dest_chain_id,\\n        bool is_evm,\\n        bool is_substrate,\\n        bytes1 raw_chain_index\\n    ) public onlyOwner {\\n        require(\\n            !(is_evm && is_substrate),\\n            \\\"Both is_evm and is_substrate cannot be true\\\"\\n        );\\n        DestChainInfo storage chainInfo = destChainInfo[dest_chain_id];\\n        chainInfo.is_evm = is_evm;\\n        chainInfo.is_substrate = is_substrate;\\n        chainInfo.raw_chain_index = raw_chain_index;\\n    }\\n\\n    function create_order(\\n        address assetAddress,\\n        uint128 amount,\\n        uint64 dest_chain_id,\\n        bytes memory receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external payable override {\\n        require(\\n            bytes(remark).length > 0 && bytes(remark).length <= 32,\\n            \\\"remark must be less than 32 bytes and not empty\\\"\\n        );\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n\\n        DestChainInfo memory chainInfo = destChainInfo[dest_chain_id];\\n        if (chainInfo.is_evm) {\\n            require(receiver.length == 20, \\\"evm address must be 20 bytes\\\");\\n        } else if (chainInfo.is_substrate) {\\n            require(\\n                receiver.length == 32,\\n                \\\"substrate public key must be 32 bytes\\\"\\n            );\\n        } else {\\n            revert(\\\"Destination chain is not supported\\\");\\n        }\\n\\n        bytes2 token = checkAssetIsExist(assetAddress);\\n        if (assetAddress == NATIVE_ASSET_ADDRESS) {\\n            amount = uint128(msg.value);\\n            xcmTransferNativeAsset(uint256(amount));\\n        } else {\\n            xcmTransferAsset(assetAddress, uint256(amount));\\n        }\\n\\n        // Build bifrost slpx create order call data\\n        bytes memory callData = BuildCallData.buildCreateOrderCallBytes(\\n            _msgSender(),\\n            block.chainid,\\n            block.number,\\n            token,\\n            amount,\\n            abi.encodePacked(chainInfo.raw_chain_index, receiver),\\n            remark,\\n            channel_id\\n        );\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit CreateOrder(\\n            assetAddress,\\n            amount,\\n            dest_chain_id,\\n            receiver,\\n            remark,\\n            channel_id\\n        );\\n    }\\n\\n    function getXtokensDestination(\\n        bytes32 publicKey\\n    ) internal pure returns (XCM_v2.Multilocation memory) {\\n        bytes[] memory interior = new bytes[](2);\\n        // Parachain: 2001/2030\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(BIFROST_PARA_ID));\\n        // AccountId32: { id: public_key , network: any }\\n        interior[1] = bytes.concat(hex\\\"01\\\", publicKey, hex\\\"00\\\");\\n        XCM_v2.Multilocation memory dest = XCM_v2.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n\\n        return dest;\\n    }\\n}\\n\",\"keccak256\":\"0xad03da33a0db169cc60e6faf4c4b7122353525a069012751f06ca05713dddf1e\",\"license\":\"Apache-2.0\"},\"contracts/DerivativeContract.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract DerivativeContract is ReentrancyGuard {\\n    address public receiver;\\n\\n    event Withdraw(address caller, address to, address token, uint256 amount);\\n\\n    constructor() {\\n        receiver = msg.sender;\\n    }\\n\\n    function withdrawErc20Token(\\n        address _erc20\\n    ) external nonReentrant returns (uint256) {\\n        require(msg.sender == receiver, \\\"forbidden\\\");\\n        require(_erc20 != address(0), \\\"invalid erc20\\\");\\n        uint256 balance = IERC20(_erc20).balanceOf(address(this));\\n        require(balance != 0, \\\"balance to low\\\");\\n        IERC20(_erc20).transfer(receiver, balance);\\n        emit Withdraw(msg.sender, receiver, _erc20, balance);\\n        return balance;\\n    }\\n\\n    function withdrawNativeToken() external nonReentrant returns (uint256) {\\n        require(msg.sender == receiver, \\\"forbidden\\\");\\n        uint256 balance = address(this).balance;\\n        require(balance != 0, \\\"balance to low\\\");\\n        (bool success, ) = receiver.call{value: balance}(\\\"\\\");\\n        require(success, \\\"failed to withdrawNativeToken\\\");\\n        emit Withdraw(msg.sender, receiver, address(0), balance);\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x38785ea975216c351dc2ff2e8cc76c04b0bb32e5125d4825e7f3e8226bb4f556\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x685586b87541a45bf6b634ef5e356a8968b3c23b33e929dec1807614db26cd6a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface IOFTReceiverV2 {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x79f5295d7c8729de73e196d3ffd5e7f5ad22f4b2cdf9f239419c0eb6fbb4816a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xd585b8f5c6b3569cd2d5d5d04345f17e9bf0d3f4ea4d0831cb4da6129629a555\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\ninterface IOFTWithFee is ICommonOFT {\\n    function deposit() external payable;\\n    function withdraw(uint _amount) external;\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint _minAmount,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint _minAmount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x02a49685f9f9870eed1f579be6d80b21966681893c6294d0627be372a5eb1186\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface ISlpx {\\n    event Mint(\\n        address minter,\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes callcode,\\n        string remark\\n    );\\n    event Redeem(\\n        address redeemer,\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes callcode\\n    );\\n    event CreateOrder(\\n        address assetAddress,\\n        uint128 amount,\\n        uint64 dest_chain_id,\\n        bytes receiver,\\n        string remark,\\n        uint32 channel_id\\n    );\\n\\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\\n    function mintVNativeAsset(\\n        address receiver,\\n        string memory remark\\n    ) external payable;\\n\\n    /// Minted vAssets\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark\\n    ) external;\\n\\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\\n    function mintVNativeAssetWithChannelId(\\n        address receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external payable;\\n\\n    /// Minted vAssets\\n    function mintVAssetWithChannelId(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external;\\n\\n    /// Redeem assets\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @dev Create order to mint vAsset or redeem vAsset on bifrost chain\\n     * @param assetAddress The address of the asset to mint or redeem\\n     * @param amount The amount of the asset to mint or redeem\\n     * @param dest_chain_id When order is executed on Bifrost, Asset/vAsset will be transferred to this chain\\n     * @param receiver The receiver address on the destination chain, 20 bytes for EVM, 32 bytes for Substrate\\n     * @param remark The remark of the order, less than 32 bytes. For example, \\\"OmniLS\\\"\\n     * @param channel_id The channel id of the order, you can set it. Bifrost chain will use it to share reward.\\n     **/\\n    function create_order(\\n        address assetAddress,\\n        uint128 amount,\\n        uint64 dest_chain_id,\\n        bytes memory receiver,\\n        string memory remark,\\n        uint32 channel_id\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x17808b1bf1b68012d4b11420c2394874f7bb900070c4d6459a9c00a3b055921f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IWASTR.sol\":{\"content\":\"// SPDX-License-Identifier: none\\npragma solidity 0.8.10;\\n\\n\\ninterface IWASTR {\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    event Approval(address indexed src, address indexed guy, uint wad);\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\n    event Deposit(address indexed dst, uint wad);\\n    event Withdrawal(address indexed src, uint wad);\\n\\n    function balanceOf(address) external view returns (uint256);\\n    function allowance(address, address) external view returns (uint256);\\n\\n    receive () external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x8bb5a21b745b70cf53c60f95a71ae6526586d94aa3c88bfb84ecde896a625aa8\",\"license\":\"none\"},\"contracts/interfaces/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface Types {\\n    enum Operation {\\n        Mint,\\n        Redeem\\n    }\\n}\\n\",\"keccak256\":\"0x2c1400e68ac0c25b82495ea5b014f265784ba28000644290493915e04157ad15\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/XCM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title XCM interface.\\n */\\ninterface XCM {\\n    /**\\n     * @dev Withdraw assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - SS58 public key of the destination account\\n     * @param is_relay - set `true` for using relay chain as reserve\\n     * @param parachain_id - set parachain id of reserve parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return bool confirmation whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_withdraw(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        bytes32 recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Withdraw assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - ETH address of the destination account\\n     * @param is_relay - set `true` for using relay chain as reserve\\n     * @param parachain_id - set parachain id of reserve parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return bool confirmation whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_withdraw(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        address recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Execute a transaction on a remote chain.\\n     * @param parachain_id - destination parachain Id (ignored if is_relay is true)\\n     * @param is_relay - if true, destination is relay_chain, if false it is parachain (see previous argument)\\n     * @param payment_asset_id - ETH address of the local asset derivate used to pay for execution in the destination chain\\n     * @param payment_amount - amount of payment asset to use for execution payment - should cover cost of XCM instructions + Transact call weight.\\n     * @param call - encoded call data (must be decodable by remote chain)\\n     * @param transact_weight - max weight that the encoded call is allowed to consume in the destination chain\\n     * @return bool confirmation whether the XCM message sent.\\n     */\\n    function remote_transact(\\n        uint256 parachain_id,\\n        bool is_relay,\\n        address payment_asset_id,\\n        uint256 payment_amount,\\n        bytes calldata call,\\n        uint64 transact_weight\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Reserve transfer assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - SS58 public key of the destination account\\n     * @param is_relay - set `true` for using relay chain as destination\\n     * @param parachain_id - set parachain id of destination parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return A boolean confirming whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_reserve_transfer(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        bytes32 recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Reserve transfer using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - ETH address of the destination account\\n     * @param is_relay - set `true` for using relay chain as destination\\n     * @param parachain_id - set parachain id of destination parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return A boolean confirming whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_reserve_transfer(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        address recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xeabf8e2f6d7ecd2aa589761b5052c04baed2ef6bc3e65e3846b563d680928330\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/XCM_v2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title XCM interface.\\n */\\ninterface XCM_v2 {\\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\\n    struct Multilocation {\\n        uint8 parents;\\n        bytes[] interior;\\n    }\\n\\n    struct WeightV2 {\\n        uint64 ref_time;\\n        uint64 proof_size;\\n    }\\n\\n    // A MultiAsset is defined by a multilocation and an amount\\n    struct MultiAsset {\\n        Multilocation location;\\n        uint256 amount;\\n    }\\n\\n    // A Currency is defined by address and the amount to be transferred\\n    struct Currency {\\n        address currencyAddress;\\n        uint256 amount;\\n    }\\n\\n    /// Transfer a token through XCM based on its address\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the\\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer(\\n        address currencyAddress,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer a token through XCM based on its address specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param fee The amount to be spent to pay for execution in destination chain\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the\\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_with_fee(\\n        address currencyAddress,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer a token through XCM based on its MultiLocation\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the\\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_multiasset(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param fee The amount to be spent to pay for execution in destination chain\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the\\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_multiasset_with_fee(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer several tokens at once through XCM based on its address specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the\\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_multi_currencies(\\n        Currency[] memory currencies,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer several tokens at once through XCM based on its location specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param assets The assets we want to transfer, defined by their location and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the\\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_multi_assets(\\n        MultiAsset[] memory assets,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /**\\n     * @param destination - Multilocation of destination chain where to send this call\\n     * @param xcm_call - encoded xcm call you want to send to destination\\n     **/\\n    function send_xcm(\\n        Multilocation memory destination,\\n        bytes memory xcm_call\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe86c8662d9d347f346a1e16fa953445909a614d41728008b4ec1f2a1d146db31\",\"license\":\"Apache-2.0\"},\"contracts/utils/AddressToAccount.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./Blake2b.sol\\\";\\n\\nlibrary AddressToAccount {\\n    using Blake2b for Blake2b.Instance;\\n\\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\\n        Blake2b.Instance memory instance = Blake2b.init(hex\\\"\\\", 32);\\n        return abi.decode(instance.finalize(src), (bytes32));\\n    }\\n\\n    function AddressToSubstrateAccount(\\n        address addr\\n    ) public view returns (bytes32 account) {\\n        bytes memory prefix = bytes(\\\"evm:\\\");\\n        bytes memory addrBytes = abi.encodePacked(addr);\\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\\n        return blake2bHash(data);\\n    }\\n}\\n\",\"keccak256\":\"0x2a5dd8e6b32dfaf911e5d1b26a25dae4d489b4e16052659077f9f59d34da9ad2\",\"license\":\"Apache-2.0\"},\"contracts/utils/Blake2b.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary Blake2b {\\n    struct Instance {\\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\\n        // but every field needed for the \\\"blake2 f function precompile\\\".\\n        //\\n        // This is a tightly packed buffer of:\\n        // - rounds: 32-bit BE\\n        // - h: 8 x 64-bit LE\\n        // - m: 16 x 64-bit LE\\n        // - t: 2 x 64-bit LE\\n        // - f: 8-bit\\n        bytes state;\\n        // Expected output hash length. (Used in `finalize`.)\\n        uint out_len;\\n        // Data passed to \\\"function F\\\".\\n        // NOTE: this is limited to 24 bits.\\n        uint input_counter;\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function init(\\n        bytes memory key,\\n        uint out_len\\n    ) internal view returns (Instance memory instance) {\\n        require(key.length == 0, \\\"Invalid key\\\");\\n        require(out_len == 32, \\\"Invalid out_len\\\");\\n        reset(instance, key, out_len);\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function reset(\\n        Instance memory instance,\\n        bytes memory key,\\n        uint out_len\\n    ) internal view {\\n        instance.out_len = out_len;\\n        instance.input_counter = 0;\\n\\n        // This is entire state transmitted to the precompile.\\n        // It is byteswapped for the encoding requirements, additionally\\n        // the IV has the initial parameter block 0 XOR constant applied, but\\n        // not the key and output length.\\n        instance\\n            .state = hex\\\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\";\\n        bytes memory state = instance.state;\\n\\n        // Update parameter block 0 with key length and output length.\\n        uint key_len = key.length;\\n        assembly {\\n            let ptr := add(state, 36)\\n            let tmp := mload(ptr)\\n            let p0 := or(shl(240, key_len), shl(248, out_len))\\n            tmp := xor(tmp, p0)\\n            mstore(ptr, tmp)\\n        }\\n\\n        // TODO: support salt and personalization\\n\\n        if (key_len > 0) {\\n            require(key_len == 64);\\n            // FIXME: the key must be zero padded\\n            assert(key.length == 128);\\n            update(instance, key, key_len);\\n        }\\n    }\\n\\n    // This calls the blake2 precompile (\\\"function F of the spec\\\").\\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\\n    // but the supplied block data will not be cleared.\\n    function call_function_f(Instance memory instance) private view {\\n        bytes memory state = instance.state;\\n        assembly {\\n            let state_ptr := add(state, 32)\\n            if iszero(\\n                staticcall(\\n                    not(0),\\n                    0x09,\\n                    state_ptr,\\n                    0xd5,\\n                    add(state_ptr, 4),\\n                    0x40\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // This function will split blocks correctly and repeatedly call the precompile.\\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\\n    //       hence the real length is indicated with `data_len`\\n    function update_loop(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len,\\n        bool last_block\\n    ) private view {\\n        bytes memory state = instance.state;\\n        uint input_counter = instance.input_counter;\\n\\n        // This is the memory location where the \\\"data block\\\" starts for the precompile.\\n        uint state_ptr;\\n        assembly {\\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\\n            // Also adjust for the size of the bytes type.\\n            state_ptr := add(state, 100)\\n        }\\n\\n        // This is the memory location where the input data resides.\\n        uint data_ptr;\\n        assembly {\\n            data_ptr := add(data, 32)\\n        }\\n\\n        uint len = data.length;\\n        while (len > 0) {\\n            if (len >= 128) {\\n                assembly {\\n                    mstore(state_ptr, mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 32), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 64), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 96), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n                }\\n\\n                len -= 128;\\n                // FIXME: remove this once implemented proper padding\\n                if (data_len < 128) {\\n                    input_counter += data_len;\\n                } else {\\n                    data_len -= 128;\\n                    input_counter += 128;\\n                }\\n            } else {\\n                // FIXME: implement support for smaller than 128 byte blocks\\n                revert();\\n            }\\n\\n            // Set length field (little-endian) for maximum of 24-bits.\\n            assembly {\\n                mstore8(add(state, 228), and(input_counter, 0xff))\\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\\n            }\\n\\n            // Set the last block indicator.\\n            // Only if we've processed all input.\\n            if (len == 0) {\\n                assembly {\\n                    // Writing byte 212 here.\\n                    mstore8(add(state, 244), last_block)\\n                }\\n            }\\n\\n            // Call the precompile\\n            call_function_f(instance);\\n        }\\n\\n        instance.input_counter = input_counter;\\n    }\\n\\n    // Update the state with a non-final block.\\n    // NOTE: the input must be complete blocks.\\n    function update(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len\\n    ) internal view {\\n        require((data.length % 128) == 0);\\n        update_loop(instance, data, data_len, false);\\n    }\\n\\n    // Update the state with a final block and return the hash.\\n    function finalize(\\n        Instance memory instance,\\n        bytes memory data\\n    ) internal view returns (bytes memory output) {\\n        // FIXME: support incomplete blocks (zero pad them)\\n        uint input_length = data.length;\\n        if (input_length == 0 || (input_length % 128) != 0) {\\n            data = abi.encodePacked(\\n                data,\\n                new bytes(128 - (input_length % 128))\\n            );\\n        }\\n        assert((data.length % 128) == 0);\\n        update_loop(instance, data, input_length, true);\\n\\n        // FIXME: support other lengths\\n        // assert(instance.out_len == 64);\\n\\n        bytes memory state = instance.state;\\n        output = new bytes(instance.out_len);\\n        if (instance.out_len == 16) {\\n            assembly {\\n                mstore(add(output, 16), mload(add(state, 20)))\\n                mstore(output, 16)\\n            }\\n        } else if (instance.out_len == 32) {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n            }\\n        } else {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n                mstore(add(output, 64), mload(add(state, 68)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x196399822da1125151480ae7b85587fae83c6a59e81d6673eb68465e7a4d9304\",\"license\":\"Apache-2.0\"},\"contracts/utils/BuildCallData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary BuildCallData {\\n    uint8 public constant PALLET_INDEX = 125;\\n    uint8 public constant MINT_CALL_INDEX = 0;\\n    uint8 public constant SWAP_CALL_INDEX = 1;\\n    uint8 public constant REDEEM_CALL_INDEX = 2;\\n    uint8 public constant STABLE_POOL_SWAP_CALL_INDEX = 3;\\n    uint8 public constant MINT_WITH_CHANNEL_ID_CALL_INDEX = 13;\\n    uint8 public constant CREATE_ORDER_CALL_INDEX = 14;\\n\\n    function buildMintCallBytes(\\n        address caller,\\n        bytes2 token,\\n        bytes memory targetChain,\\n        string memory remark\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(MINT_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                token,\\n                targetChain,\\n                toScaleString(remark)\\n            );\\n    }\\n\\n    function buildMintWithChannelIdCallBytes(\\n        address caller,\\n        bytes2 token,\\n        bytes memory targetChain,\\n        string memory remark,\\n        uint32 channel_id\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(MINT_WITH_CHANNEL_ID_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                token,\\n                targetChain,\\n                toScaleString(remark),\\n                encode_uint32(channel_id)\\n            );\\n    }\\n\\n    function buildCreateOrderCallBytes(\\n        address caller,\\n        uint256 chain_id,\\n        uint256 block_number,\\n        bytes2 token,\\n        uint128 amount,\\n        bytes memory targetChain,\\n        string memory remark,\\n        uint32 channel_id\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(CREATE_ORDER_CALL_INDEX);\\n\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                encode_uint64(uint64(chain_id)),\\n                encode_uint128(uint128(block_number)),\\n                token,\\n                encode_uint128(amount),\\n                targetChain,\\n                toScaleString(remark),\\n                encode_uint32(channel_id)\\n            );\\n    }\\n\\n    function buildSwapCallBytes(\\n        address caller,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 currency_out_min,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(currency_out_min),\\n                targetChain\\n            );\\n    }\\n\\n    function buildStablePoolSwapCallBytes(\\n        address caller,\\n        uint32 pool_id,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 min_dy,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(STABLE_POOL_SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                encode_uint32(pool_id),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(min_dy),\\n                targetChain\\n            );\\n    }\\n\\n    function buildRedeemCallBytes(\\n        address caller,\\n        bytes2 vtoken,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(REDEEM_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(prefix, abi.encodePacked(caller), vtoken, targetChain);\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint128(uint128 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(16);\\n        for (uint i = 0; i < 16; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint64(uint64 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(8);\\n        for (uint i = 0; i < 8; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint32(uint32 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(4);\\n        for (uint i = 0; i < 4; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function toTruncBytes(uint64 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(8);\\n        uint len = 0;\\n        for (uint i = 0; i < 8; i++) {\\n            uint8 temp = uint8(x / (2 ** (8 * i)));\\n            if (temp != 0) {\\n                b[i] = bytes1(temp);\\n            } else {\\n                len = i;\\n                break;\\n            }\\n        }\\n        bytes memory rst = new bytes(len);\\n        for (uint i = 0; i < len; i++) {\\n            rst[i] = b[i];\\n        }\\n        return rst;\\n    }\\n\\n    // Convert an hexadecimal character to their value\\n    function fromScaleChar(uint8 c) internal pure returns (uint8) {\\n        if (bytes1(c) >= bytes1(\\\"0\\\") && bytes1(c) <= bytes1(\\\"9\\\")) {\\n            return 48 + c - uint8(bytes1(\\\"0\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"a\\\") && bytes1(c) <= bytes1(\\\"z\\\")) {\\n            return 97 + c - uint8(bytes1(\\\"a\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"A\\\") && bytes1(c) <= bytes1(\\\"Z\\\")) {\\n            return 65 + c - uint8(bytes1(\\\"A\\\"));\\n        }\\n        revert(\\\"fail\\\");\\n    }\\n\\n    // encode the string to bytes\\n    // following the scale format\\n    // format: len + content\\n    // a-z: 61->87\\n    // A-Z: 41->57\\n    // 0-9: 30->40\\n    function toScaleString(\\n        string memory s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory ss = bytes(s);\\n        bytes memory len = toTruncBytes(uint64(ss.length * 4));\\n        bytes memory content = new bytes(ss.length);\\n        for (uint i = 0; i < ss.length; ++i) {\\n            content[i] = bytes1(fromScaleChar(uint8(ss[i])));\\n        }\\n        bytes memory rst = bytes.concat(len, content);\\n        return rst;\\n    }\\n}\\n\",\"keccak256\":\"0x48f91ab5399c7595ea60d0446f55c81f0f1089779cdc7133c8a10a3491798270\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200316538038062003165833981016040819052620000349162000168565b806001600160a01b03811662000065576040516335fdcccd60e21b8152600060048201526024015b60405180910390fd5b6001600160a01b03166080526200007c33620000fb565b6001600160a01b038216620000d45760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420736f6e6569756d536c70780000000000000000000000000060448201526064016200005c565b50600180546001600160a01b0319166001600160a01b0392909216919091179055620001a0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200016357600080fd5b919050565b600080604083850312156200017c57600080fd5b62000187836200014b565b915062000197602084016200014b565b90509250929050565b608051612fa2620001c36000396000818161038e0152610c0c0152612fa26000f3fe6080604052600436106101395760003560e01c80639641e45e116100ab578063b0f479a11161006f578063b0f479a11461037f578063c4af1c0b146103b2578063c95b6f0e146103db578063d01cca0f14610403578063f29588c714610416578063f2fde38b1461043e57600080fd5b80639641e45e146102c757806397877cd7146102ef57806397f3fd3814610313578063a7fd9c6b14610333578063aae9ecff1461036957600080fd5b806352b814b6116100fd57806352b814b6146102215780635d741b0914610234578063715018a6146102545780637fcf35da1461026957806385572ffb146102895780638da5cb5b146102a957600080fd5b806301ffc9a7146101455780630253a1d61461017a57806328b743a2146101915780632991e4e6146101c1578063357ba05f1461020157600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004611f06565b61045e565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061018f610495565b005b34801561019d57600080fd5b506101656101ac366004611f45565b60056020526000908152604090205460ff1681565b3480156101cd57600080fd5b506101e973ffffffff0000000000000001000000000000001081565b6040516001600160a01b039091168152602001610171565b34801561020d57600080fd5b5061018f61021c366004611f45565b6105e4565b61018f61022f366004611faa565b61067e565b34801561024057600080fd5b506003546101e9906001600160a01b031681565b34801561026057600080fd5b5061018f610a84565b34801561027557600080fd5b5061018f610284366004612023565b610a98565b34801561029557600080fd5b5061018f6102a43660046120d3565b610c01565b3480156102b557600080fd5b506000546001600160a01b03166101e9565b3480156102d357600080fd5b506101e973c6bf0c5c78686f1d0e2e54b97d6de6e2cefae9fd81565b3480156102fb57600080fd5b5061030560025481565b604051908152602001610171565b34801561031f57600080fd5b506001546101e9906001600160a01b031681565b34801561033f57600080fd5b506101e961034e366004611f45565b6004602052600090815260409020546001600160a01b031681565b34801561037557600080fd5b506101e961500481565b34801561038b57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101e9565b3480156103be57600080fd5b506103c861015481565b60405161ffff9091168152602001610171565b3480156103e757600080fd5b506101e973ba273b7fa296614019c71dcc54dca6c922a93bcf81565b61018f61041136600461210d565b610c60565b34801561042257600080fd5b506101e973ffffffff0000000000000001000000000000000781565b34801561044a57600080fd5b5061018f610459366004611f45565b6111a4565b60006001600160e01b031982166385572ffb60e01b148061048f57506001600160e01b031982166301ffc9a760e01b145b92915050565b6003546001600160a01b0316336001600160a01b0316146104d15760405162461bcd60e51b81526004016104c890612139565b60405180910390fd5b600354604051600160f01b6020820152620186a060228201526001600160a01b0390911690683635c9adc5dea000009060009060420160408051601f1981840301815290829052630d94982d60e21b8252915060009073ba273b7fa296614019c71dcc54dca6c922a93bcf9063365260b49061055b906101549088908890879089906004016121c0565b6040805180830381865afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b91906121fc565b50600281905560035460405191925082916001600160a01b03909116907f405485c96e1fef0d0e7aa1b6bc6f839d6e825f49f9e5607dc07fcd69e098970690600090a350505050565b6105ec61121a565b6001600160a01b0381166106345760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016104c8565b600380546001600160a01b0319166001600160a01b0383169081179091556040517fda100d63215e418eb5fdfcdb0b592f13bc6aea387392797c16c70caf4ea8772190600090a250565b6003546001600160a01b0316336001600160a01b0316146106b15760405162461bcd60e51b81526004016104c890612139565b6001600160a01b03808416600090815260046020526040902054168061070b5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016104c8565b6040516308aea7fd60e41b815273ffffffff0000000000000001000000000000001060048201526000906001600160a01b03831690638aea7fd0906024016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190612220565b60405163095ea7b360e01b815273ba273b7fa296614019c71dcc54dca6c922a93bcf60048201526024810182905290915073ffffffff000000000000000100000000000000109063095ea7b3906044016020604051808303816000875af11580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f9190612239565b50600060405180606001604052806108343390565b6001600160a01b0316815260200160006001600160a01b0316815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050604051630d94982d60e21b81529293506001600160a01b0389169290915073ba273b7fa296614019c71dcc54dca6c922a93bcf9063365260b4906108de90610154908690899087908e908e9060040161225b565b6040805180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906121fc565b509050803410156109615760405162461bcd60e51b815260206004820152600d60248201526c746f6f20736d616c6c2066656560981b60448201526064016104c8565b803414610a0557600061097482346122ac565b604051909150600090339083908381818185875af1925050503d80600081146109b9576040519150601f19603f3d011682016040523d82523d6000602084013e6109be565b606091505b5050905080610a025760405162461bcd60e51b815260206004820152601060248201526f19985a5b1959081d1bc81c99599d5b9960821b60448201526064016104c8565b50505b60405163695ef6bf60e01b815273ba273b7fa296614019c71dcc54dca6c922a93bcf9063695ef6bf908390610a489030906101549088908b908b906004016122d1565b6000604051808303818588803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b50505050505050505050505050565b610a8c61121a565b610a966000611274565b565b61ffff881661015414610aed5760405162461bcd60e51b815260206004820152601e60248201527f6f6e6c792072656365697665206d73672066726f6d2061737461722d7a6b000060448201526064016104c8565b3373ba273b7fa296614019c71dcc54dca6c922a93bcf14610b505760405162461bcd60e51b815260206004820152601860248201527f6f6e6c79206e6174697665206f66742063616e2063616c6c000000000000000060448201526064016104c8565b6001546001600160a01b03858116911614610bb75760405162461bcd60e51b815260206004820152602160248201527f6f6e6c792072656365697665206d73672066726f6d20736f6e6569756d536c706044820152600f60fb1b60648201526084016104c8565b610bf78383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112c492505050565b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c4c576040516335fdcccd60e21b81523360048201526024016104c8565b610c5d610c58826124f1565b611490565b50565b6003546001600160a01b0316336001600160a01b031614610c935760405162461bcd60e51b81526004016104c890612139565b6001600160a01b038083166000908152600460208181526040808420548151631686199360e21b8152915194951693635a18664c938281019392829003018187875af1158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190612220565b90507337795fdd8c165cab4d6c05771d564d80439cd0936001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505060405163095ea7b360e01b8152738d5c5cb8ec58285b424c93436189fb865e437fef6004820152602481018590527337795fdd8c165cab4d6c05771d564d80439cd093935063095ea7b3925060440190506020604051808303816000875af1158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190612239565b50604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610e1e579050509050600060405180604001604052807337795fdd8c165cab4d6c05771d564d80439cd0936001600160a01b031681526020018481525090508082600081518110610e9157610e9161259d565b60209081029190910101526040805160a081019091526001600160a01b03861660c08201526000908060e081016040516020818303038152906040528152602001604051602001610eed90602080825260009082015260400190565b60405160208183030381529060405281526020018481526020017337795fdd8c165cab4d6c05771d564d80439cd0936001600160a01b03168152602001610f7960405180602001604052808981525060408051915160248084019190915281518084039091018152604490920190526020810180516001600160e01b03166397a657c960e01b17905290565b81525090506000306001600160a01b031663b0f479a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe291906125b3565b6001600160a01b03166320487ded67ad8bef0a6a427394846040518363ffffffff1660e01b81526004016110179291906125d0565b602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190612220565b90508085116110995760405162461bcd60e51b815260206004820152600d60248201526c746f6f20736d616c6c2066656560981b60448201526064016104c8565b6110a381866122ac565b82604001516000815181106110ba576110ba61259d565b60200260200101516020018181525050306001600160a01b031663b0f479a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c91906125b3565b6001600160a01b03166396f4e9f967ad8bef0a6a427394846040518363ffffffff1660e01b81526004016111619291906125d0565b6020604051808303816000875af1158015611180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190612220565b6111ac61121a565b6001600160a01b0381166112115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104c8565b610c5d81611274565b6000546001600160a01b03163314610a965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080828060200190518101906112db91906126b8565b6001600160a01b038083166000908152600460205260409020549294509092501661130957611309826114f4565b600181600181111561131d5761131d6126ed565b1461136a5760405162461bcd60e51b815260206004820181905260248201527f6f6e6c792072656465656d206f7065726174696f6e20697320616c6c6f77656460448201526064016104c8565b60035460025460405163a9059cbb60e01b81526001600160a01b039092166004830152602482015260009073ffffffff000000000000000100000000000000109063a9059cbb906044016020604051808303816000875af11580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f79190612239565b9050806114395760405162461bcd60e51b815260206004820152601060248201526f6661696c656420746f2063686172676560801b60448201526064016104c8565b6114898373ffffffff0000000000000001000000000000001061090360f01b6002548961146691906122ac565b6001600160a01b0380891660009081526004602052604081205490911690611611565b5050505050565b6000816080015190506000816000815181106114ae576114ae61259d565b60200260200101516000015190506000826000815181106114d1576114d161259d565b60200260200101516020015190506114ee82828660600151611896565b50505050565b6001600160a01b03818116600090815260046020526040902054161561155c5760405162461bcd60e51b815260206004820152601d60248201527f616c72656164792073657420646572697661746976654164647265737300000060448201526064016104c8565b60006040518060200161156e90611ef9565b601f1982820381018352601f9091011660405290506001600160a01b038216600061159a818385611a44565b6001600160a01b03858116600081815260046020908152604080832080546001600160a01b03191695871695861790558483526005909152808220805460ff1916600117905551939450919290917f57b0e11e6397ba91fdcf1893a12f81fa7f83af6687a4c7c51bb7ec5cc87b700991a350505050565b6000836001600160801b03161161166a5760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016104c8565b6001600160a01b0385166116905761168b86846001600160801b0316611b4c565b6116a4565b6116a48587856001600160801b0316611cf9565b60408051600060208201819052606085901b6bffffffffffffffffffffffff191660218301528251601581840301815260358301938490526309e4f00160e01b9093529173C94B9fEEAc60c3dE5CCf4039B0C45AD676110423916309e4f0019161171d918b91469143918c918c91908b90603901612703565b600060405180830381865af415801561173a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117629190810190612792565b604051635eef7b0d60e11b8152909150600090819073c6bf0c5c78686f1d0e2e54b97d6de6e2cefae9fd9063bddef61a906117a1908490600401612808565b6040805180830381865afa1580156117bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e19190612830565b604051637c87590960e11b815291935091506150049063f90eb2129061182c906107ee9060009073ffffffff000000000000000100000000000000079087908a908a9060040161285e565b6020604051808303816000875af115801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f9190612239565b61188b5760405162461bcd60e51b81526004016104c8906128af565b505050505050505050565b6001600160a01b0383167337795fdd8c165cab4d6c05771d564d80439cd093146118f75760405162461bcd60e51b815260206004820152601260248201527137b7363c903932b1b2b4bb32902ba0a9aa2960711b60448201526064016104c8565b604051632e1a7d4d60e01b8152600481018390527337795fdd8c165cab4d6c05771d564d80439cd09390632e1a7d4d90602401600060405180830381600087803b15801561194457600080fd5b505af1158015611958573d6000803e3d6000fd5b505050506000806000808480602001905181019061197691906128db565b6001600160a01b038083166000908152600460205260409020549498509296509094509250166119a9576119a9826114f4565b60008360018111156119bd576119bd6126ed565b14611a0a5760405162461bcd60e51b815260206004820152601e60248201527f6f6e6c79206d696e74206f7065726174696f6e20697320616c6c6f776564000060448201526064016104c8565b6001600160a01b03808316600090815260046020526040812054611a3b9287929161080360f01b918b911686611611565b50505050505050565b600083471015611a965760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064016104c8565b8151611ae45760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016104c8565b8282516020840186f590506001600160a01b038116611b455760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016104c8565b9392505050565b604051631932052960e11b81526001600160a01b0383166004820152600090738F8F6B104190a4A24CcFf7B4006Ea7A59baeAf81906332640a5290602401602060405180830381865af4158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb9190612220565b60408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050600082600081518110611c2957611c2961259d565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600081518110611c5d57611c5d61259d565b602090810291909101015260405163400c0e8d60e01b81526150049063400c0e8d90611c9a908590859088906000906107ee90829060040161293f565b6020604051808303816000875af1158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190612239565b6114895760405162461bcd60e51b81526004016104c8906128af565b6001600160a01b038316611d465760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b60448201526064016104c8565b604051631932052960e11b81526001600160a01b0383166004820152600090738F8F6B104190a4A24CcFf7B4006Ea7A59baeAf81906332640a5290602401602060405180830381865af4158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc59190612220565b604080516001808252818301909252919250600091906020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090508582600081518110611e2257611e2261259d565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600081518110611e5657611e5661259d565b60209081029190910101526040516219054d60e41b81526150049063019054d090611e92908590859088906000906107ee90829060040161293f565b6020604051808303816000875af1158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190612239565b611ef15760405162461bcd60e51b81526004016104c8906128af565b505050505050565b610587806129e683390190565b600060208284031215611f1857600080fd5b81356001600160e01b031981168114611b4557600080fd5b6001600160a01b0381168114610c5d57600080fd5b600060208284031215611f5757600080fd5b8135611b4581611f30565b60008083601f840112611f7457600080fd5b5081356001600160401b03811115611f8b57600080fd5b602083019150836020828501011115611fa357600080fd5b9250929050565b600080600060408486031215611fbf57600080fd5b8335611fca81611f30565b925060208401356001600160401b03811115611fe557600080fd5b611ff186828701611f62565b9497909650939450505050565b6001600160401b0381168114610c5d57600080fd5b803561201e81611ffe565b919050565b60008060008060008060008060c0898b03121561203f57600080fd5b883561ffff8116811461205157600080fd5b975060208901356001600160401b038082111561206d57600080fd5b6120798c838d01611f62565b909950975060408b0135915061208e82611ffe565b90955060608a0135945060808a0135935060a08a013590808211156120b257600080fd5b506120bf8b828c01611f62565b999c989b5096995094979396929594505050565b6000602082840312156120e557600080fd5b81356001600160401b038111156120fb57600080fd5b820160a08185031215611b4557600080fd5b6000806040838503121561212057600080fd5b823561212b81611f30565b946020939093013593505050565b60208082526015908201527436bab9ba1031329039b1b934b83a2a3934b3b3b2b960591b604082015260600190565b60005b8381101561218357818101518382015260200161216b565b838111156114ee5750506000910152565b600081518084526121ac816020860160208601612168565b601f01601f19169290920160200192915050565b61ffff86168152846020820152836040820152821515606082015260a0608082015260006121f160a0830184612194565b979650505050505050565b6000806040838503121561220f57600080fd5b505080516020909101519092909150565b60006020828403121561223257600080fd5b5051919050565b60006020828403121561224b57600080fd5b81518015158114611b4557600080fd5b61ffff87168152856020820152846040820152831515606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b6000828210156122cc57634e487b7160e01b600052601160045260246000fd5b500390565b600060018060a01b03808816835261ffff8716602084015285604084015284606084015260a060808401528084511660a08401528060208501511660c0840152506040830151606060e084015261232c610100840182612194565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561237057612370612338565b60405290565b60405160a081016001600160401b038111828210171561237057612370612338565b604051601f8201601f191681016001600160401b03811182821017156123c0576123c0612338565b604052919050565b60006001600160401b038211156123e1576123e1612338565b50601f01601f191660200190565b600082601f83011261240057600080fd5b813561241361240e826123c8565b612398565b81815284602083860101111561242857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261245657600080fd5b813560206001600160401b0382111561247157612471612338565b61247f818360051b01612398565b82815260069290921b8401810191818101908684111561249e57600080fd5b8286015b848110156124e657604081890312156124bb5760008081fd5b6124c361234e565b81356124ce81611f30565b815281850135858201528352918301916040016124a2565b509695505050505050565b600060a0823603121561250357600080fd5b61250b612376565b8235815261251b60208401612013565b602082015260408301356001600160401b038082111561253a57600080fd5b612546368387016123ef565b6040840152606085013591508082111561255f57600080fd5b61256b368387016123ef565b6060840152608085013591508082111561258457600080fd5b5061259136828601612445565b60808301525092915050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156125c557600080fd5b8151611b4581611f30565b600060406001600160401b038516835260208181850152845160a0838601526125fc60e0860182612194565b905081860151603f19808784030160608801526126198383612194565b88860151888203830160808a01528051808352908601945060009350908501905b8084101561266c57845180516001600160a01b031683528601518683015293850193600193909301929086019061263a565b5060608901516001600160a01b031660a08901526080890151888203830160c08a0152955061269b8187612194565b9a9950505050505050505050565b80516002811061201e57600080fd5b600080604083850312156126cb57600080fd5b82516126d681611f30565b91506126e4602084016126a9565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038816815260208101879052604081018690526001600160f01b0319851660608201526001600160801b038416608082015261010060a0820181905260009061275583820186612194565b905082810360c08401526007815266536f6e6569756d60c81b60208201526040810191505063ffffffff831660e083015298975050505050505050565b6000602082840312156127a457600080fd5b81516001600160401b038111156127ba57600080fd5b8201601f810184136127cb57600080fd5b80516127d961240e826123c8565b8181528560208385010111156127ee57600080fd5b6127ff826020830160208601612168565b95945050505050565b602081016004831061282a57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561284357600080fd5b825161284e81611ffe565b6020939093015192949293505050565b868152851515602082015260018060a01b038516604082015283606082015260c06080820152600061289360c0830185612194565b90506001600160401b03831660a0830152979650505050505050565b6020808252601290820152714661696c656420746f2073656e642078636d60701b604082015260600190565b600080600080608085870312156128f157600080fd5b84516128fc81611f30565b935061290a602086016126a9565b9250604085015161291a81611f30565b606086015190925063ffffffff8116811461293457600080fd5b939692955090935050565b60c0808252875190820181905260009060209060e0840190828b01845b828110156129815781516001600160a01b03168452928401929084019060010161295c565b5050508381038285015288518082528983019183019060005b818110156129b65783518352928401929184019160010161299a565b505060408501899052871515606086015292506129d1915050565b608082019390935260a0015294935050505056fe608060405234801561001057600080fd5b506001600081905580546001600160a01b03191633179055610550806100376000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635a18664c146100465780638aea7fd014610061578063f7260d3e14610074575b600080fd5b61004e61009f565b6040519081526020015b60405180910390f35b61004e61006f3660046104af565b610238565b600154610087906001600160a01b031681565b6040516001600160a01b039091168152602001610058565b60006100a9610455565b6001546001600160a01b031633146100f45760405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b60448201526064015b60405180910390fd5b47806101335760405162461bcd60e51b815260206004820152600e60248201526d62616c616e636520746f206c6f7760901b60448201526064016100eb565b6001546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610180576040519150601f19603f3d011682016040523d82523d6000602084013e610185565b606091505b50509050806101d65760405162461bcd60e51b815260206004820152601d60248201527f6661696c656420746f2077697468647261774e6174697665546f6b656e00000060448201526064016100eb565b600154604080513381526001600160a01b03909216602083015260008282015260608201849052517f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f79181900360800190a15090506102356001600055565b90565b6000610242610455565b6001546001600160a01b031633146102885760405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b60448201526064016100eb565b6001600160a01b0382166102ce5760405162461bcd60e51b815260206004820152600d60248201526c0696e76616c696420657263323609c1b60448201526064016100eb565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033991906104df565b9050806103795760405162461bcd60e51b815260206004820152600e60248201526d62616c616e636520746f206c6f7760901b60448201526064016100eb565b60015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529084169063a9059cbb906044016020604051808303816000875af11580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f091906104f8565b50600154604080513381526001600160a01b0392831660208201529185168282015260608201839052517f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f79181900360800190a190506104506001600055565b919050565b600260005414156104a85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016100eb565b6002600055565b6000602082840312156104c157600080fd5b81356001600160a01b03811681146104d857600080fd5b9392505050565b6000602082840312156104f157600080fd5b5051919050565b60006020828403121561050a57600080fd5b815180151581146104d857600080fdfea2646970667358221220ebb6334ea08860d70d137896a11e2eb1d7ed64e64d8b33d059538982c11f1cc864736f6c634300080a0033a26469706673582212208080f928e9d0948c6a2b279d788d8f90454e8f5dc642cc10e177f84d6d81ae2c64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101395760003560e01c80639641e45e116100ab578063b0f479a11161006f578063b0f479a11461037f578063c4af1c0b146103b2578063c95b6f0e146103db578063d01cca0f14610403578063f29588c714610416578063f2fde38b1461043e57600080fd5b80639641e45e146102c757806397877cd7146102ef57806397f3fd3814610313578063a7fd9c6b14610333578063aae9ecff1461036957600080fd5b806352b814b6116100fd57806352b814b6146102215780635d741b0914610234578063715018a6146102545780637fcf35da1461026957806385572ffb146102895780638da5cb5b146102a957600080fd5b806301ffc9a7146101455780630253a1d61461017a57806328b743a2146101915780632991e4e6146101c1578063357ba05f1461020157600080fd5b3661014057005b600080fd5b34801561015157600080fd5b50610165610160366004611f06565b61045e565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061018f610495565b005b34801561019d57600080fd5b506101656101ac366004611f45565b60056020526000908152604090205460ff1681565b3480156101cd57600080fd5b506101e973ffffffff0000000000000001000000000000001081565b6040516001600160a01b039091168152602001610171565b34801561020d57600080fd5b5061018f61021c366004611f45565b6105e4565b61018f61022f366004611faa565b61067e565b34801561024057600080fd5b506003546101e9906001600160a01b031681565b34801561026057600080fd5b5061018f610a84565b34801561027557600080fd5b5061018f610284366004612023565b610a98565b34801561029557600080fd5b5061018f6102a43660046120d3565b610c01565b3480156102b557600080fd5b506000546001600160a01b03166101e9565b3480156102d357600080fd5b506101e973c6bf0c5c78686f1d0e2e54b97d6de6e2cefae9fd81565b3480156102fb57600080fd5b5061030560025481565b604051908152602001610171565b34801561031f57600080fd5b506001546101e9906001600160a01b031681565b34801561033f57600080fd5b506101e961034e366004611f45565b6004602052600090815260409020546001600160a01b031681565b34801561037557600080fd5b506101e961500481565b34801561038b57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101e9565b3480156103be57600080fd5b506103c861015481565b60405161ffff9091168152602001610171565b3480156103e757600080fd5b506101e973ba273b7fa296614019c71dcc54dca6c922a93bcf81565b61018f61041136600461210d565b610c60565b34801561042257600080fd5b506101e973ffffffff0000000000000001000000000000000781565b34801561044a57600080fd5b5061018f610459366004611f45565b6111a4565b60006001600160e01b031982166385572ffb60e01b148061048f57506001600160e01b031982166301ffc9a760e01b145b92915050565b6003546001600160a01b0316336001600160a01b0316146104d15760405162461bcd60e51b81526004016104c890612139565b60405180910390fd5b600354604051600160f01b6020820152620186a060228201526001600160a01b0390911690683635c9adc5dea000009060009060420160408051601f1981840301815290829052630d94982d60e21b8252915060009073ba273b7fa296614019c71dcc54dca6c922a93bcf9063365260b49061055b906101549088908890879089906004016121c0565b6040805180830381865afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b91906121fc565b50600281905560035460405191925082916001600160a01b03909116907f405485c96e1fef0d0e7aa1b6bc6f839d6e825f49f9e5607dc07fcd69e098970690600090a350505050565b6105ec61121a565b6001600160a01b0381166106345760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016104c8565b600380546001600160a01b0319166001600160a01b0383169081179091556040517fda100d63215e418eb5fdfcdb0b592f13bc6aea387392797c16c70caf4ea8772190600090a250565b6003546001600160a01b0316336001600160a01b0316146106b15760405162461bcd60e51b81526004016104c890612139565b6001600160a01b03808416600090815260046020526040902054168061070b5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016104c8565b6040516308aea7fd60e41b815273ffffffff0000000000000001000000000000001060048201526000906001600160a01b03831690638aea7fd0906024016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190612220565b60405163095ea7b360e01b815273ba273b7fa296614019c71dcc54dca6c922a93bcf60048201526024810182905290915073ffffffff000000000000000100000000000000109063095ea7b3906044016020604051808303816000875af11580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f9190612239565b50600060405180606001604052806108343390565b6001600160a01b0316815260200160006001600160a01b0316815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050604051630d94982d60e21b81529293506001600160a01b0389169290915073ba273b7fa296614019c71dcc54dca6c922a93bcf9063365260b4906108de90610154908690899087908e908e9060040161225b565b6040805180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906121fc565b509050803410156109615760405162461bcd60e51b815260206004820152600d60248201526c746f6f20736d616c6c2066656560981b60448201526064016104c8565b803414610a0557600061097482346122ac565b604051909150600090339083908381818185875af1925050503d80600081146109b9576040519150601f19603f3d011682016040523d82523d6000602084013e6109be565b606091505b5050905080610a025760405162461bcd60e51b815260206004820152601060248201526f19985a5b1959081d1bc81c99599d5b9960821b60448201526064016104c8565b50505b60405163695ef6bf60e01b815273ba273b7fa296614019c71dcc54dca6c922a93bcf9063695ef6bf908390610a489030906101549088908b908b906004016122d1565b6000604051808303818588803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b50505050505050505050505050565b610a8c61121a565b610a966000611274565b565b61ffff881661015414610aed5760405162461bcd60e51b815260206004820152601e60248201527f6f6e6c792072656365697665206d73672066726f6d2061737461722d7a6b000060448201526064016104c8565b3373ba273b7fa296614019c71dcc54dca6c922a93bcf14610b505760405162461bcd60e51b815260206004820152601860248201527f6f6e6c79206e6174697665206f66742063616e2063616c6c000000000000000060448201526064016104c8565b6001546001600160a01b03858116911614610bb75760405162461bcd60e51b815260206004820152602160248201527f6f6e6c792072656365697665206d73672066726f6d20736f6e6569756d536c706044820152600f60fb1b60648201526084016104c8565b610bf78383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112c492505050565b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c4c576040516335fdcccd60e21b81523360048201526024016104c8565b610c5d610c58826124f1565b611490565b50565b6003546001600160a01b0316336001600160a01b031614610c935760405162461bcd60e51b81526004016104c890612139565b6001600160a01b038083166000908152600460208181526040808420548151631686199360e21b8152915194951693635a18664c938281019392829003018187875af1158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190612220565b90507337795fdd8c165cab4d6c05771d564d80439cd0936001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505060405163095ea7b360e01b8152738d5c5cb8ec58285b424c93436189fb865e437fef6004820152602481018590527337795fdd8c165cab4d6c05771d564d80439cd093935063095ea7b3925060440190506020604051808303816000875af1158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190612239565b50604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610e1e579050509050600060405180604001604052807337795fdd8c165cab4d6c05771d564d80439cd0936001600160a01b031681526020018481525090508082600081518110610e9157610e9161259d565b60209081029190910101526040805160a081019091526001600160a01b03861660c08201526000908060e081016040516020818303038152906040528152602001604051602001610eed90602080825260009082015260400190565b60405160208183030381529060405281526020018481526020017337795fdd8c165cab4d6c05771d564d80439cd0936001600160a01b03168152602001610f7960405180602001604052808981525060408051915160248084019190915281518084039091018152604490920190526020810180516001600160e01b03166397a657c960e01b17905290565b81525090506000306001600160a01b031663b0f479a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe291906125b3565b6001600160a01b03166320487ded67ad8bef0a6a427394846040518363ffffffff1660e01b81526004016110179291906125d0565b602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190612220565b90508085116110995760405162461bcd60e51b815260206004820152600d60248201526c746f6f20736d616c6c2066656560981b60448201526064016104c8565b6110a381866122ac565b82604001516000815181106110ba576110ba61259d565b60200260200101516020018181525050306001600160a01b031663b0f479a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c91906125b3565b6001600160a01b03166396f4e9f967ad8bef0a6a427394846040518363ffffffff1660e01b81526004016111619291906125d0565b6020604051808303816000875af1158015611180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190612220565b6111ac61121a565b6001600160a01b0381166112115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104c8565b610c5d81611274565b6000546001600160a01b03163314610a965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080828060200190518101906112db91906126b8565b6001600160a01b038083166000908152600460205260409020549294509092501661130957611309826114f4565b600181600181111561131d5761131d6126ed565b1461136a5760405162461bcd60e51b815260206004820181905260248201527f6f6e6c792072656465656d206f7065726174696f6e20697320616c6c6f77656460448201526064016104c8565b60035460025460405163a9059cbb60e01b81526001600160a01b039092166004830152602482015260009073ffffffff000000000000000100000000000000109063a9059cbb906044016020604051808303816000875af11580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f79190612239565b9050806114395760405162461bcd60e51b815260206004820152601060248201526f6661696c656420746f2063686172676560801b60448201526064016104c8565b6114898373ffffffff0000000000000001000000000000001061090360f01b6002548961146691906122ac565b6001600160a01b0380891660009081526004602052604081205490911690611611565b5050505050565b6000816080015190506000816000815181106114ae576114ae61259d565b60200260200101516000015190506000826000815181106114d1576114d161259d565b60200260200101516020015190506114ee82828660600151611896565b50505050565b6001600160a01b03818116600090815260046020526040902054161561155c5760405162461bcd60e51b815260206004820152601d60248201527f616c72656164792073657420646572697661746976654164647265737300000060448201526064016104c8565b60006040518060200161156e90611ef9565b601f1982820381018352601f9091011660405290506001600160a01b038216600061159a818385611a44565b6001600160a01b03858116600081815260046020908152604080832080546001600160a01b03191695871695861790558483526005909152808220805460ff1916600117905551939450919290917f57b0e11e6397ba91fdcf1893a12f81fa7f83af6687a4c7c51bb7ec5cc87b700991a350505050565b6000836001600160801b03161161166a5760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016104c8565b6001600160a01b0385166116905761168b86846001600160801b0316611b4c565b6116a4565b6116a48587856001600160801b0316611cf9565b60408051600060208201819052606085901b6bffffffffffffffffffffffff191660218301528251601581840301815260358301938490526309e4f00160e01b9093529173__$e184f4046250cd750dfdb139628ab13bdc$__916309e4f0019161171d918b91469143918c918c91908b90603901612703565b600060405180830381865af415801561173a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117629190810190612792565b604051635eef7b0d60e11b8152909150600090819073c6bf0c5c78686f1d0e2e54b97d6de6e2cefae9fd9063bddef61a906117a1908490600401612808565b6040805180830381865afa1580156117bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e19190612830565b604051637c87590960e11b815291935091506150049063f90eb2129061182c906107ee9060009073ffffffff000000000000000100000000000000079087908a908a9060040161285e565b6020604051808303816000875af115801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f9190612239565b61188b5760405162461bcd60e51b81526004016104c8906128af565b505050505050505050565b6001600160a01b0383167337795fdd8c165cab4d6c05771d564d80439cd093146118f75760405162461bcd60e51b815260206004820152601260248201527137b7363c903932b1b2b4bb32902ba0a9aa2960711b60448201526064016104c8565b604051632e1a7d4d60e01b8152600481018390527337795fdd8c165cab4d6c05771d564d80439cd09390632e1a7d4d90602401600060405180830381600087803b15801561194457600080fd5b505af1158015611958573d6000803e3d6000fd5b505050506000806000808480602001905181019061197691906128db565b6001600160a01b038083166000908152600460205260409020549498509296509094509250166119a9576119a9826114f4565b60008360018111156119bd576119bd6126ed565b14611a0a5760405162461bcd60e51b815260206004820152601e60248201527f6f6e6c79206d696e74206f7065726174696f6e20697320616c6c6f776564000060448201526064016104c8565b6001600160a01b03808316600090815260046020526040812054611a3b9287929161080360f01b918b911686611611565b50505050505050565b600083471015611a965760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064016104c8565b8151611ae45760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016104c8565b8282516020840186f590506001600160a01b038116611b455760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016104c8565b9392505050565b604051631932052960e11b81526001600160a01b038316600482015260009073__$ddfb0e6c1c4d05795fcce73a90830b0995$__906332640a5290602401602060405180830381865af4158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb9190612220565b60408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050600082600081518110611c2957611c2961259d565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600081518110611c5d57611c5d61259d565b602090810291909101015260405163400c0e8d60e01b81526150049063400c0e8d90611c9a908590859088906000906107ee90829060040161293f565b6020604051808303816000875af1158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190612239565b6114895760405162461bcd60e51b81526004016104c8906128af565b6001600160a01b038316611d465760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b60448201526064016104c8565b604051631932052960e11b81526001600160a01b038316600482015260009073__$ddfb0e6c1c4d05795fcce73a90830b0995$__906332640a5290602401602060405180830381865af4158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc59190612220565b604080516001808252818301909252919250600091906020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090508582600081518110611e2257611e2261259d565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600081518110611e5657611e5661259d565b60209081029190910101526040516219054d60e41b81526150049063019054d090611e92908590859088906000906107ee90829060040161293f565b6020604051808303816000875af1158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190612239565b611ef15760405162461bcd60e51b81526004016104c8906128af565b505050505050565b610587806129e683390190565b600060208284031215611f1857600080fd5b81356001600160e01b031981168114611b4557600080fd5b6001600160a01b0381168114610c5d57600080fd5b600060208284031215611f5757600080fd5b8135611b4581611f30565b60008083601f840112611f7457600080fd5b5081356001600160401b03811115611f8b57600080fd5b602083019150836020828501011115611fa357600080fd5b9250929050565b600080600060408486031215611fbf57600080fd5b8335611fca81611f30565b925060208401356001600160401b03811115611fe557600080fd5b611ff186828701611f62565b9497909650939450505050565b6001600160401b0381168114610c5d57600080fd5b803561201e81611ffe565b919050565b60008060008060008060008060c0898b03121561203f57600080fd5b883561ffff8116811461205157600080fd5b975060208901356001600160401b038082111561206d57600080fd5b6120798c838d01611f62565b909950975060408b0135915061208e82611ffe565b90955060608a0135945060808a0135935060a08a013590808211156120b257600080fd5b506120bf8b828c01611f62565b999c989b5096995094979396929594505050565b6000602082840312156120e557600080fd5b81356001600160401b038111156120fb57600080fd5b820160a08185031215611b4557600080fd5b6000806040838503121561212057600080fd5b823561212b81611f30565b946020939093013593505050565b60208082526015908201527436bab9ba1031329039b1b934b83a2a3934b3b3b2b960591b604082015260600190565b60005b8381101561218357818101518382015260200161216b565b838111156114ee5750506000910152565b600081518084526121ac816020860160208601612168565b601f01601f19169290920160200192915050565b61ffff86168152846020820152836040820152821515606082015260a0608082015260006121f160a0830184612194565b979650505050505050565b6000806040838503121561220f57600080fd5b505080516020909101519092909150565b60006020828403121561223257600080fd5b5051919050565b60006020828403121561224b57600080fd5b81518015158114611b4557600080fd5b61ffff87168152856020820152846040820152831515606082015260a060808201528160a0820152818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b6000828210156122cc57634e487b7160e01b600052601160045260246000fd5b500390565b600060018060a01b03808816835261ffff8716602084015285604084015284606084015260a060808401528084511660a08401528060208501511660c0840152506040830151606060e084015261232c610100840182612194565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561237057612370612338565b60405290565b60405160a081016001600160401b038111828210171561237057612370612338565b604051601f8201601f191681016001600160401b03811182821017156123c0576123c0612338565b604052919050565b60006001600160401b038211156123e1576123e1612338565b50601f01601f191660200190565b600082601f83011261240057600080fd5b813561241361240e826123c8565b612398565b81815284602083860101111561242857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261245657600080fd5b813560206001600160401b0382111561247157612471612338565b61247f818360051b01612398565b82815260069290921b8401810191818101908684111561249e57600080fd5b8286015b848110156124e657604081890312156124bb5760008081fd5b6124c361234e565b81356124ce81611f30565b815281850135858201528352918301916040016124a2565b509695505050505050565b600060a0823603121561250357600080fd5b61250b612376565b8235815261251b60208401612013565b602082015260408301356001600160401b038082111561253a57600080fd5b612546368387016123ef565b6040840152606085013591508082111561255f57600080fd5b61256b368387016123ef565b6060840152608085013591508082111561258457600080fd5b5061259136828601612445565b60808301525092915050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156125c557600080fd5b8151611b4581611f30565b600060406001600160401b038516835260208181850152845160a0838601526125fc60e0860182612194565b905081860151603f19808784030160608801526126198383612194565b88860151888203830160808a01528051808352908601945060009350908501905b8084101561266c57845180516001600160a01b031683528601518683015293850193600193909301929086019061263a565b5060608901516001600160a01b031660a08901526080890151888203830160c08a0152955061269b8187612194565b9a9950505050505050505050565b80516002811061201e57600080fd5b600080604083850312156126cb57600080fd5b82516126d681611f30565b91506126e4602084016126a9565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038816815260208101879052604081018690526001600160f01b0319851660608201526001600160801b038416608082015261010060a0820181905260009061275583820186612194565b905082810360c08401526007815266536f6e6569756d60c81b60208201526040810191505063ffffffff831660e083015298975050505050505050565b6000602082840312156127a457600080fd5b81516001600160401b038111156127ba57600080fd5b8201601f810184136127cb57600080fd5b80516127d961240e826123c8565b8181528560208385010111156127ee57600080fd5b6127ff826020830160208601612168565b95945050505050565b602081016004831061282a57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561284357600080fd5b825161284e81611ffe565b6020939093015192949293505050565b868152851515602082015260018060a01b038516604082015283606082015260c06080820152600061289360c0830185612194565b90506001600160401b03831660a0830152979650505050505050565b6020808252601290820152714661696c656420746f2073656e642078636d60701b604082015260600190565b600080600080608085870312156128f157600080fd5b84516128fc81611f30565b935061290a602086016126a9565b9250604085015161291a81611f30565b606086015190925063ffffffff8116811461293457600080fd5b939692955090935050565b60c0808252875190820181905260009060209060e0840190828b01845b828110156129815781516001600160a01b03168452928401929084019060010161295c565b5050508381038285015288518082528983019183019060005b818110156129b65783518352928401929184019160010161299a565b505060408501899052871515606086015292506129d1915050565b608082019390935260a0015294935050505056fe608060405234801561001057600080fd5b506001600081905580546001600160a01b03191633179055610550806100376000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635a18664c146100465780638aea7fd014610061578063f7260d3e14610074575b600080fd5b61004e61009f565b6040519081526020015b60405180910390f35b61004e61006f3660046104af565b610238565b600154610087906001600160a01b031681565b6040516001600160a01b039091168152602001610058565b60006100a9610455565b6001546001600160a01b031633146100f45760405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b60448201526064015b60405180910390fd5b47806101335760405162461bcd60e51b815260206004820152600e60248201526d62616c616e636520746f206c6f7760901b60448201526064016100eb565b6001546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610180576040519150601f19603f3d011682016040523d82523d6000602084013e610185565b606091505b50509050806101d65760405162461bcd60e51b815260206004820152601d60248201527f6661696c656420746f2077697468647261774e6174697665546f6b656e00000060448201526064016100eb565b600154604080513381526001600160a01b03909216602083015260008282015260608201849052517f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f79181900360800190a15090506102356001600055565b90565b6000610242610455565b6001546001600160a01b031633146102885760405162461bcd60e51b81526020600482015260096024820152683337b93134b23232b760b91b60448201526064016100eb565b6001600160a01b0382166102ce5760405162461bcd60e51b815260206004820152600d60248201526c0696e76616c696420657263323609c1b60448201526064016100eb565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033991906104df565b9050806103795760405162461bcd60e51b815260206004820152600e60248201526d62616c616e636520746f206c6f7760901b60448201526064016100eb565b60015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529084169063a9059cbb906044016020604051808303816000875af11580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f091906104f8565b50600154604080513381526001600160a01b0392831660208201529185168282015260608201839052517f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f79181900360800190a190506104506001600055565b919050565b600260005414156104a85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016100eb565b6002600055565b6000602082840312156104c157600080fd5b81356001600160a01b03811681146104d857600080fd5b9392505050565b6000602082840312156104f157600080fd5b5051919050565b60006020828403121561050a57600080fd5b815180151581146104d857600080fdfea2646970667358221220ebb6334ea08860d70d137896a11e2eb1d7ed64e64d8b33d059538982c11f1cc864736f6c634300080a0033a26469706673582212208080f928e9d0948c6a2b279d788d8f90454e8f5dc642cc10e177f84d6d81ae2c64736f6c634300080a0033",
  "libraries": {
    "AddressToAccount": "0x8F8F6B104190a4A24CcFf7B4006Ea7A59baeAf81",
    "BuildCallData": "0xC94B9fEEAc60c3dE5CCf4039B0C45AD676110423"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "details": "Note ensure you check the msg.sender is the OffRampRouter",
        "params": {
          "message": "CCIP Message"
        }
      },
      "getRouter()": {
        "returns": {
          "_0": "CCIP router address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
        "params": {
          "interfaceId": "The interfaceId to check"
        },
        "returns": {
          "_0": "true if the interfaceId is supported"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
      },
      "getRouter()": {
        "notice": "Return the current router"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165 supports an interfaceId"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1070,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1514,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "soneiumSlpx",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1516,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "vastrLayerZeroFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1518,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "scriptTrigger",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1522,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "callerToDerivativeAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1526,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "isDerivativeAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}